<?xml version="1.0" encoding="UTF-8"?>
<?teipublisher odd="docbook.odd" template="documentation.html" depth="3"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <title>TEI Publisher Documentation</title>
    <author>
      <personname>
        <firstname>Wolfgang</firstname>
        <surname>Meier</surname>
      </personname>
      <affiliation>
        <orgname>eXist Solutions GmbH</orgname>
      </affiliation>
    </author>
    <author>
      <personname>
        <firstname>Magdalena</firstname>
        <surname>Turska</surname>
      </personname>
      <affiliation>
        <orgname>eXist Solutions GmbH</orgname>
      </affiliation>
    </author>
    <keywordset vocab="#genre">
      <keyword>Documentation</keyword>
    </keywordset>
  </info>
  <section>
    <title>Quickstart</title>
    <section>
      <title>What TEI Publisher does ...</title>
      <para>The vision behind TEI Publisher is to provide a tool which enables scholars and editors to publish their materials without becoming programmers, but
        also does not force them into a one-size-fits-it-all framework. Experienced developers will benefit as well by writing less code, avoiding redundancy,
        improve maintenance and interoperability - to just name a few. TEI Publisher is all about <emphasis role="bold">standards</emphasis>, <emphasis
          role="bold">modularity</emphasis>, <emphasis role="bold">reusability</emphasis> and <emphasis role="bold">sustainability</emphasis>!</para>
      <para>At the heart of TEI Publisher lies the TEI Processing Model (PM). This is described in the <link
          xlink:href="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/TD.html#TDPM">TEI P5 guidelines</link> as well as in further chapters here and forms
        part of the ODD specification format: it defines how a TEI document should be rendered in different output formats.</para>
      <para>TEI gives users a lot of freedom: there's always more than one way to encode your material! To maintain interoperability and sustainability, you
        need a way to formally describe the schema used as well as document editorial guidelines and transcription processes. TEI ODD was designed for the
        purpose of expressing all this in the TEI language itself. But how a document should be rendered was previously still considered to be the
        responsibility of external publishing software and could not be described within the ODD.</para>
      <para>The advent of the TEI Processing Model changed this! The intended processing for all elements can now be expressed within the TEI vocabulary as part
        of the ODD thus fulfilling its promise of <emphasis>One Document Does It All</emphasis>. Markup elements are mapped to a small set of abstract
        transformation functions, called <emphasis>behaviours</emphasis>. Basic styling features can be set directly within the ODD using CSS. The processing
        model is media-agnostic: behaviours and rendition styles are transparently translated into different output media types like HTML, XSL-FO, LaTeX, or
        ePUB. A single ODD can handle a multitude of output media types with just a few small adjustments.</para>
      <para>Despite its elegant simplicity, various projects we realized in the past prove that the TEI Processing Model is:</para>
      <orderedlist>
        <listitem>
          <para>powerful enough to cover complex transformation needs</para>
        </listitem>
        <listitem>
          <para>a truly universal tool for any kind of digital edition</para>
        </listitem>
        <listitem>
          <para>efficient and as fast (or faster) as handwritten transformations</para>
        </listitem>
        <listitem>
          <para>suitable for any XML, not just TEI (this documentation is written in docbook!)</para>
        </listitem>
      </orderedlist>
      <para>However, online editions require more than just a text transformation: the text needs to be embedded into an application context, adding navigation,
        pagination, search, facsimile display and so on. The larger part of TEI Publisher deals with those aspects, providing all the necessary building blocks
        for an online edition.</para>
      <para>Staying true to the spirit of code reuse and interoperability, TEI Publisher 4.0 implements all functionality as small "lego" blocks to be freely
        arranged and recombined. The technology making this possible is called <emphasis>Web Components</emphasis>. It is part of the HTML5 specification and
        natively implemented by many browsers. Users don't need to dive into the details of this standard though: all you need to modify the example pages is a
        bit of basic HTML knowledge. Only where the <link xlink:href="../components/docs.html">available components</link> are not enough, a new use case needs
        to be described and suitable new components implemented but then they can be incorporated into existing component pool for everyone else to use. After
        all, our mantra is reuse, reuse, reuse and we want to turn TEI Publisher into a box of tools the entire community can benefit from.
        See our <link linkend="roadmap">roadmap</link> for the ideas we are thinking of.</para>
    </section>
    <section xml:id="installation">
      <title>Installation</title>
      <para>TEI Publisher requires <link xlink:href="http://exist-db.org">eXist XML database</link> to operate. It is distributed as an eXist application
        package, making it easy to install on any eXist database instance - either on your local machine or any remote server.</para>
      <para>You can install eXist and TEI Publisher manually, as described below, or alternatively
        use the provided <link linkend="docker">docker image</link>.</para>

      <section xml:id="exist-installation">
        <title>Installing into an eXist instance</title>

          <section xml:id="java">
            <title>Java</title>
          <para>Before installing eXist, make sure you have Java installed on your machine. You can run
            <command>java -version</command> on a command line to check which version of Java you have.
            Make sure you have at least Java 8 (recommended: Java 11). Please note that the
            <command>java -version</command> shows the full version string, so 1.8.0 or similar instead of just 8.</para>
          <para>If you do not have Java installed, you can choose between a variety of different Java distributions for your operating system.
            While these are largely equivalent, so far we had smoothest installation experience across operating systems with the
            <link xlink:href="https://www.azul.com/downloads/zulu-community/?package=jdk">Zulu Community OpenJDK</link> builds.
            In particular for Windows users, this provides the best out of the box experience.</para>
          </section>
          <section xml:id="download">
            <title>Download</title>

          <para>Download an eXist distribution following the link on its <link xlink:href="http://exist-db.org/exist/apps/homepage/index.html#downloads">homepage</link>.
            </para>
          </section>

          <note>
            <para>It is recommended that you set up an admin password when installing eXist but
              make sure to remember or store it securely!</para>
          </note>

          <section xml:id="mac-installation">
            <title>Mac installation</title>
            <para>On a Mac download the file with the <command>.dmg</command> extension,
              e.g. "<filename>eXist-db-5.x.x.dmg</filename>".</para>


            <para>Double clicking the downloaded <command>.dmg</command> file should install eXist on your
            local system. It is only required to drag the eXist app icon over to the Applications folder. </para>

            <para>Once the installation has completed, you should find an app in your Applications folder
              which you can use to launch eXist.</para>
          </section>

          <section xml:id="windows-installation">
            <title>Windows installation</title>
            <para>On Windows download the file with the <command>.jar</command> extension,
              e.g. "<filename>exist-installer-5.x.x.jar</filename>".</para>

              <para>Double clicking the <command>.jar</command> should install eXist on your local system.
              It will launch an installer to guide you through basic settings. Default settings suggested by the installer
              provide a good starting point for most projects so there's no need to change anything.</para>

              <note>
                <para>If double-clicking the <command>.jar</command> does not have any effect,
                there's may be something wrong with your Java setup. The
                    <filename>java</filename> binary needs to be in your <envar>%PATH%</envar> environment.</para>
                <para>You can also try to manually start the installer by opening a command prompt, changing to the directory where you downloaded the distribution
                  and typing:</para>
                <synopsis>java -jar exist-installer-5.x.x.jar</synopsis>
              </note>

              <para>Once the installation is completed, you should find an eXist-db shortcut to launch eXist.</para>
          </section>

          <section xml:id="unix-installation">
            <title>Unix installation</title>
            <para>Download the file with the <command>.jar</command> extension,
              e.g. "<filename>exist-installer-5.x.x.jar</filename>".</para>

            <para>Double clicking the <command>.jar</command> should install eXist on your local system.
              It will launch an installer to guide you through basic settings. Default settings suggested by the installer
              provide a good starting point for most projects so there's no need to change anything.</para>

              <para>Once the installation is completed, you should find an eXist-db shortcut to launch eXist,
                otherwise navigate to the installation directory and run <command>bin/startup.sh</command>.</para>

          <note>
            <para>Some <emphasis>Linux users</emphasis> may prefer the plain <command>.tar.bz2</command> package, which can just be untarred to any location.
            This package does not include an installer and eXist has to be launched on the command line: navigate into the untarred directory and run</para>
            <synopsis>bin/startup.sh</synopsis>
            <para>in a shell, skipping the jar installer step above. Ignore the next section, navigate directly to <link xlink:href="http://localhost:8080">http://localhost:8080</link> and
            follow the steps for installing TEI Publisher via the dashboard described further below.</para>
          </note>
        </section>

        <section xml:id="first-launch">
          <title>First launch</title>
          <para>Once eXist is launched for the first time you should see (with the exception of some Unix system configurations described above)
            a splash window popping up, showing that some default applications are being installed:</para>
          <figure>
            <title>Splash Screen on eXist Startup</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="eXistSplash.png" width="256px"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Upon first start, an additional configuration window will pop up on Windows and Mac,
            allowing you to configure basic parameters. Default settings suggested provide a good starting point
            for most projects so usually there's no need to change anything.
            </para>
          <figure>
            <title>Configuration Dialog Showing on First Start</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="eXistInitialConfig.png" width="512px"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Clicking on <guibutton>Save</guibutton> will show a popup asking to confirm the location of
          the data directory. Unless you have specific requirements just agree to the suggestion of the configuration dialog.</para>
          <para><emphasis>Windows users</emphasis> will be asked if they would like to install eXist as a service. This is
            highly recommended to ensure that the database is correctly closed whenever the operating system shuts down.</para>
          <para>If all went well, eXist should now be up and running in the background. Mac and Windows users should find a small eXist icon in their task bar. Right-clicking on it will reveal a menu:</para>
          <figure>
            <title>Taskbar Launcher Context Menu</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="eXistTaskbarIcon.png" width="512px"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

          <section xml:id="packageManager">
            <title>Installing TEI Publisher</title>
          <para>Clicking on <guimenuitem>Open Dashboard</guimenuitem> in the taskbar will open a browser and display eXist's Dashboard: the central administrative hub for the database.
           Alternatively - e.g. when you chose the manual installation on Linux - you can also open a browser window and navigate to: <link xlink:href="http://localhost:8080">http://localhost:8080</link>.</para>
          <para>Log into the dashboard using the admin account and the password you chose during the installation (it will be empty by default). Use the left sidebar to navigate to the <guimenuitem>Package Manager</guimenuitem>. You'll see two tabs: the first one lists the application packages currently installed, the second can be used to install additional packages from eXist's public application repository.</para>
          <para>Switch to the <guimenuitem>Available</guimenuitem> tab and search the list for TEI Publisher. Once you find it,
            click on the little install icon.</para>
      <para>After installing you will find the TEI Publisher icon in the tab showing installed apps. Click on it to open the TEI Publisher.</para>
      <figure>
        <title>Installing <emphasis>TEI Publisher</emphasis> from the Package Manager</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="eXistDashboard.png" width="640px"/>
          </imageobject>
        </mediaobject>
      </figure>
      </section>
      </section>
        <section xml:id="docker">
          <title>Using docker</title>
          <para>If you do not want to install eXist yourself, you can use docker to run TEI Publisher. Docker is a tool to simplify the installation of
            applications and services. It creates a virtual environment including everything required for the service to run. Using our <link xlink:href="https://cloud.docker.com/u/existdb/repository/registry-1.docker.io/existdb/tei-publisher">docker image</link>, eXist will already be set up to
            include TEI Publisher as well as the Shakespeare and Van Gogh demo apps.</para>
          <procedure>
            <step>
              <para>Install <link xlink:href="https://www.docker.com/">docker</link> on your machine. Windows and
                Mac users may download the <link xlink:href="https://www.docker.com/products/docker-desktop">docker desktop</link> app.</para>
            </step>
            <step>
              <para>To download the image run the following in a console</para>
              <synopsis>docker pull existdb/teipublisher:latest</synopsis>
            </step>
            <step>
              <para>once the download is complete, you can run the image with the following command:</para>
              <synopsis>docker run -p 8081:8080 -p 8444:8443 --name teipublisher existdb/teipublisher:latest</synopsis>
              <para>Startup should be fast because the database is already pre-populated. However, changes you make may
                not persist if the docker container is deleted or updated to a newer release. If you want to be sure that
                your changes are safe, you should specify a local volume for storing the database by adding:</para>
              <synopsis>-v exist-data:/exist-data</synopsis>
              <para>See below for an explanation of the parameters:</para>
              <variablelist>
                <varlistentry>
                  <term>-p</term>
                  <listitem>
                    <para>Maps a port on your local machine (8081 and 8444) to the port used by eXist within the container. eXist will always run on 8080 for HTTP and 8443 for HTTPS. If those ports are already occupied by different services on your machine, choose a different port for the first number.</para>
                  </listitem>
                </varlistentry>
              <varlistentry>
                <term>-v</term>
                <listitem>
                  <para>Creates a named ("exist-data") volume for storing the database, using the directory specified after the colon. If you skip this, any changes to the database will be lost if you remove
                    the docker container, update it or create a new one. With <option>-v</option> the data will be stored outside the container.</para>
                  <para>If you just intend to play around a bit, you can skip the parameter.</para>
                </listitem>
              </varlistentry>
                <varlistentry>
                  <term>--name</term>
                  <listitem>
                    <para>Assigns a name to the container, so you can reference it in other docker commands, like <code>docker stop</code>. We'll use the name
                    in all commands below.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
              <para>Once the container has started, you can access the eXist dashboard in your browser by navigating to</para>
              <synopsis>http://localhost:8081</synopsis>
              <para>From the dashboard you can click on the TEI Publisher, Shakespeare or Van Gogh icons to open the corresponding applications.</para>
            </step>
            <step>
              <para>To stop the container run</para>
              <synopsis>docker stop teipublisher</synopsis>
            </step>
            <step>
              <para>To start the container again:</para>
              <synopsis>docker start teipublisher</synopsis>
              <para>Note that when you restart a container, it will run in detached mode, so you won't see any console output. You can view the output with following command though:</para>
              <synopsis>docker logs teipublisher</synopsis>
            </step>
          </procedure>
          <section>
            <title>Other useful commands</title>
          <variablelist>
            <varlistentry>
              <term>docker container ps -a</term>
              <listitem>
                <para>Lists all running and stopped containers</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>docker volume ls</term>
              <listitem>
                <para>Displays existing volumes (where your database is stored)</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>docker cp teipublisher:/exist-data .</term>
              <listitem>
                <para>Copy the contents of the database data volume to the current directory on local disk, so you can back it up. Note that this will copy the
                  raw database files as created by eXist (not your XML, which is binary encoded inside those files). Also make sure you run the command after
                  stopping the active container.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>docker volume rm exist-data</term>
              <listitem>
                <para>Remove the contents of the database data volume (in case you would like to start from scratch, deleting all changes you made).</para>
              </listitem>
            </varlistentry>
          </variablelist>

            <para>Have a look at the docker documentation and <link xlink:href="https://www.docker.com/sites/default/files/Docker_CheatSheet_08.09.2016_0.pdf">cheatsheet</link> for more commands.</para>
          </section>
        </section>
    </section>
    <section>
      <title>Browsing Documents</title>
      <section>
        <title>The Start Page</title>
        <para>The start page of TEI Publisher serves as a playground for viewing documents and testing transformations. It consists of three panels:<orderedlist>
            <listitem>
              <para>the list of documents currently installed</para>
            </listitem>
            <listitem>
              <para>a panel showing the ODD files known to the application</para>
            </listitem>
            <listitem>
              <para>an upload box to upload new documents</para>
            </listitem>
          </orderedlist>
        </para>
        <para>You can upload your own TEI documents by either clicking on the <guibutton>upload</guibutton> button or dragging and dropping files onto the
          upload panel.</para>
        <para>The sample documents installed by default showcase various customization aspects using different ODDs and view templates. We suggest to have a
          look at each of them to see what TEI Publisher can do.</para>
        <note>
          <title>Note</title>
          <para>You need to be <emphasis role="bold">logged in</emphasis> for most advanced actions like creating or editing ODDs. The login button to the right
            of the menu bar allows you to log in. By default, there's a user named <parameter>tei</parameter> with password
            <parameter>simple</parameter>.</para>
        </note>
      </section>
      <section>
        <title>Document View</title>
        <para>The document view can vary, depending on the sample document you are looking at. Nevertheless some default functionality will be shared:</para>
        <itemizedlist>
          <listitem>
            <para>the rightmost button in the toolbar opens the settings panel. Here you can change the ODD being used for display as well as the view template
              (more about this later). By default, all sample documents apply the specific ODD which fits them best, but you can play around and select another
              ODD to see what happens.</para>
            <figure>
              <title>The Settings Panel</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odd-page-template-settings.png" width="512px"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>the leftmost toolbar button will open a table of contents (if the viewed document has a division structure)</para>
          </listitem>
          <listitem>
            <para>the <guibutton>Download</guibutton> menu allows you to download the currently viewed document in a variety of output formats. Not all output
              formats work equally well for all examples as we have not customized every example for every media.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section>
      <title>Selected Use Cases</title>
      <para>As we have already mentioned, the document view can vary, sometimes substantially, depending on the sample document you are looking at. This is a
        natural consequence of TEI's versatility and broad scope of its application. What follows, requirements for the document view - both its layout and
        composition as well as processing rules governing the transformation of the text of the document itself - will differ to a great extent. Sample
        documents which are included in TEI Publisher's installation package do not exhaust its applications but rather aim to present some chosen use
        cases:</para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>Critik der reinen Vernunft</emphasis> from the <emphasis>Deutsches Textarchiv</emphasis> corpus presents a philosophical tractate,
            originally published in print, thus following 'traditional' book structure with front pages, foreword and chapters. It can nevertheless demonstrate
            very well Publisher's capacities in typesetting, switching between physical and logical structure of the document (just toggle <guibutton>Page
              View</guibutton> in the <parameter>Settings</parameter> panel) as well as generation of multiple output formats from single set of processing
            models in the ODD (try choosing <parameter>PDF</parameter> or <parameter>ePub</parameter> options in the <guibutton>Download</guibutton>).
              <emphasis>Purchas his pilgrimages</emphasis>, from the <emphasis>EEBO-TCP</emphasis> project, while roughly similar in structure is much earlier
            work (1613) and demonstrates extensive use of marginal notes.</para>
        </listitem>
        <listitem>
          <para>Shakespeare's <emphasis>Romeo and Juliet</emphasis>, from <emphasis>Bodleian First Folio</emphasis> project uses dedicated TEI elements to
            encode structure of the play but it also showcases the parallel transcription and facsimile alignment for its presentation which is obviously of
            general application and could be used for any genre, not limited to dramatic texts.</para>
        </listitem>
        <listitem>
          <para>Correspondence corpora are common, yet very interesting, subjects for digital editions. Despite basic similarities in structure, depending on
            the period, scope and particular research perspective, intended presentation may vary enormously. We are presenting samples of:</para>
          <itemizedlist>
            <listitem><para>15th century manuscript letter to <emphasis>Mikołaj Orlik</emphasis> demonstrating alignment between Latin original and parallel Polish
              translation,</para></listitem>
            <listitem><para>16th century manuscript letter of <emphasis>Hernán Cortés</emphasis> showcasing parallel transcription/translation
                and facsimile view and transcription enhanced with
             commentaries and explicitly encoded transcriptional features,</para></listitem>
            <listitem>
              <para>A letter from Van Gogh to Paul Gauguin written in 1888. This intentionally reproduces the flexible column layout pioneered by the <link
                xlink:href="http://vangoghletters.org">Vincent Van Gogh Letters</link> online edition, which is a model example for correspondence.</para>
            </listitem>
            <listitem><para>20th century manuscript letter from <emphasis>Robert Graves</emphasis> where emphasis has been put on visualizing rich encoding of
              semantic information in the letter, in particular geographic and prosopographical data.</para></listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <note>
        <title>Note</title>
        <para>List of samples is expected to grow and we'd like to encourage contributions illustrating other genres and perspectives.</para>
        <para>We'd like to stress that preparing showcases above has been only possible thanks to numerous projects releasing their sources openly, in
          particular the <link xlink:href="http://firstfolio.bodleian.ox.ac.uk">Bodleian First Folio</link>, <link
            xlink:href="http://www.deutschestextarchiv.de">Deutsches Textarchiv</link>,
          <link xlink:href="http://vangoghletters.org">Vincent Van Gogh Museum</link> and <link xlink:href="https://www.textcreationpartnership.org/tcp-eebo"
            >EEBO-TCP</link>. We'd also like to thank William Graves and Anna Skolimowska for sharing their correspondence material.</para>
      </note>
    </section>
    <section>
      <title>Experimenting with ODDs and page templates</title>
      <para>All TEI Publisher's sample documents are TEI XML files which are transformed into a HTML webpage for display in the browser. Two major factors
        determine how the final page is going to look like: an <emphasis role="bold">ODD</emphasis> and a <emphasis role="bold">page template</emphasis>. </para>
      <para>We have already mentioned in the very first section that the TEI Processing Model lies at the heart of the Publisher - the ODD file associated with
        a document defines the rules of transformation of the XML source file into HTML. Detailed discussion of the Processing Model can be found in <link
          linkend="pm-syntax">following chapters</link>, for now it is sufficient to say this is where decisions if a TEI element should be rendered inline,
        with a tooltip or as a marginal note are made. Simplifying things a bit the <emphasis>text</emphasis> of the document that you see rendered in your
        browser is an effect of applying the rules from ODD file to the source document. </para>
      <para>Nevertheless, as we demonstrated in the section on selected sample documents, in the application context we certainly want more than just text,
        however nicely typeset. From basic navigation controls, table of content, to facsimile display, critical apparatus, glossaries and maps - all of this
        and much more could be included in the final webpage. Following <emphasis>divide and conquer</emphasis> approach the TEI Publisher defines such
        specialized page elements as small, reusable blocks, using the Web Components technology. Components can be used like common HTML elements, thus a page
        template is just an HTML fragment which organizes the building blocks needed for a specific page. </para>
      <para>Looking more closely again at the TEI Publisher's <guibutton>Start</guibutton> page, we can now give more detail what is happening when any of the
        sample documents is loaded. On the right hand side there is a panel listing all ODD files available. Each of the sample documents includes a processing
        instruction which specifies default ODD and page template for this document. You can check what they are in <guibutton>Settings</guibutton> panel. For
        the Graves letter it would be <parameter>Graves' Letters</parameter> ODD and <parameter>Letter with map/facets</parameter> template.</para>
      <figure>
        <title>The Settings Panel for the Graves Letter</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="odd-page-template-settings.png" width="512px"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>It is easy to experiment with different page templates and ODDs just changing these options in the <guibutton>Settings</guibutton> panel. An
        important caveat though is that not every page template makes sense for every document - after all parallel alignment can only be successful if there is
        something to align, map needs coordinates to display, page view needs information about page breaks and so on.</para>
    </section>
    <section xml:id="upload">
      <title>Uploading your own documents</title>
      <para>If you read this, in all likelihood you already have some documents of your own you might want published, whether they are in TEI,
        DocBook, MS Word DOCX or other XML format. First step is to upload them into the
        database. You need to be <emphasis role="bold">logged in</emphasis> to do it (check the short info on the <guibutton>Start</guibutton> page for user
        name and password). Then uploading is just a question of dragging your documents onto the <guibutton>Upload</guibutton> area. They will become available
        in the document list immediately after upload is completed.</para>
      <figure>
        <title>The Upload Panel</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="upload.png" width="512px"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Congratulations, now you can view your documents! Try to experiment and find the ODD and page template that best fits your needs and use it as a
        starting point for your own customization if necessary. Once you are ready with these you can generate your own application for your documents only,
        which packs away all the sandbox features of TEI Publisher and leaves just what is needed for publishing.</para>
      <para>If you attempt to upload a Microsoft Word document, the upload will automatically trigger upconversion of Word to TEI,
          using a custom ODD for the tranformation. Please note that the focus of this conversion is to preserve textual content, structure
          and basic semantics of the text, not provide  authoritative mapping of complete set of MS Word features to TEI. Refer to
          <link  linkend="docx">DOCX handling</link> section for more information.</para>
      <note>
        <title>Note</title>
        <para>Please bear in mind that while TEI Publisher aims to be a universal tool, the specific components may make certain assumptions about data they are
          getting and if your documents do not follow same conventions it may be required to adjust parameters passed to the components from the page template
          or the component logic.</para>
        <para> By means of example - table of content component assumes that the document structure is represented by means of nested <parameter>div</parameter>
          elements and section titles are given in <parameter>head</parameter> element. If your project rather chooses numbered divisions
            (<parameter>div1</parameter>, <parameter>div2</parameter>) etc it may be advisable to adjust this to avoid customizing all navigation, table of
          contents and so on, but it is one of very rare cases where TEI Publisher exposes any predilection for a particular flavour of TEI.</para>
        <para>Similarly, template for aligned transcription and translation is parametrized to accept an XPath expression pointing to the location of the
          transcription and aligned translation, likely for your documents this expression would have to be adjusted (unless of course you also have Latin texts
          with Polish translation structured in a similar way). Furthermore, to correctly display corresponding translation fragment a custom mapping function may need to be passed to the translation view (cf.
        <link xlink:href="templates/pages/vangogh.html" role="source"><filename>Van Gogh</filename></link>  or
        <link xlink:href="templates/pages/cortez.html" role="source"><filename>Cortés</filename></link> letter templates for examples)</para>
      </note>
    </section>
  </section>
  <section>
    <title>Basic Customization</title>
    <para>While TEI Publisher already provides various ODDs and page templates targeting specific domains, it is likely that your project may require certain
      adjustments to fully meet your needs. It has been one of primary concerns in Publisher's design that customization is not only possible on various levels
      but also encouraged and we aim it to be as simple as possible. Unfortunately no simpler, so let's review basic customization options first.</para>
    <para>Very broadly we can group customization needs into two sets: changing the rules for transformation of the source or changing the organization of the
      rendered web page. The former requires modification of the ODD and the latter adjustment of the page template. In both cases, it may be best to choose as
      your starting point an already existing ODD or page template and adjust it.</para>
    <section>
      <title>Creating Your First ODD</title>
      <para>The general workflow for creating a customization is as follows:<orderedlist>
          <listitem>
            <para>upload a TEI sample document you want to format</para>
          </listitem>
          <listitem>
            <para>create a new ODD</para>
          </listitem>
          <listitem>
            <para>modify the ODD to match your requirements</para>
          </listitem>
        </orderedlist>
      </para>
      <para>For the purpose of this quickstart, we will reuse one of the pre-installed sample documents, but create a new ODD for it (while we will create an
        empty ODD, it is also possible to generate one based on one or more <link linkend="odd-by-example">sample TEI documents</link>):</para>
      <procedure>
        <step>
          <para>Log in and fill out the form at the bottom of the panel listing ODD files. Choose a name for the ODD, e.g. <option>myletter</option> (without a
            suffix) and a title, which will appear in the list after creation. Click on <guibutton>Create</guibutton> (not <guibutton>Create from
              examples</guibutton>).</para>
          <para>The newly created ODD should appear in the side panel.</para>
        </step>
        <step>
          <para>In the document list, click on <emphasis>Letter #6 from Robert Graves to William Graves</emphasis> to open it in the document viewer.</para>
        </step>
        <step>
          <para>Open the settings panel (rightmost toolbar button, see above) and choose your ODD from the dropdown showing available ODDs. You may also change
            the used HTML template to <option>Default single text layout</option>, though this is not absolutely necessary.</para>
        </step>
        <step>
          <para>The view should change and display the letter's content with only basic formatting applied. Since our ODD has just been created and is empty, we
            see the content with standard formatting applied. Our ODD by default inherits from <filename>teipublisher.odd</filename>, which likewise extends
              <filename>tei_simplePrint.odd</filename>. The latter is maintained by the TEI community and contains processing model declarations for the most
            important TEI elements. Thanks to this inheritance mechanism, many documents display nicely without requiring a lot of additional
            customization.</para>
        </step>
        <step>
          <para>From the menu, select <guimenu>Admin</guimenu> / <guimenuitem>Edit ODD</guimenuitem> to open the visual ODD editor.</para>
        </step>
      </procedure>
    </section>
    <section>
      <title>Modify the ODD</title>
      <para>Changing processing models in the ODD is a powerful mechanism through which you can control all aspects of the transformation of your documents from
        source XML format to all output formats: HTML, ePUB, PDF etc. As already mentioned it is considered best practice to chain ODD customizations together
        and rather change or add project specific rules to more generic ODD rather than copy them in extenso. ODD chaining allows for the future upgrades as
        your base ODDs may be updated by standardization bodies which maintain them. Commonly project ODDs would extend <filename>teipublisher.odd</filename>, a
        generic TEI Publisher set of processing rules. </para>
      <para>Beginning with version 3.0 of TEI Publisher, you have the choice between writing the ODD by hand or using a visual editor. Both approaches can be
        combined and mixed. The visual editor saves the ODD in a non-destructive way, preserving any information not related to the processing model. It is thus
        save to switch between hand-editing the ODD and using the visual editor. Just make sure you reload the visual editor view after modifying the source XML
        and vice versa. That said, visual editor is specifically tailored to editing processing models so it will be likely the fastest and safest way to edit
        your ODD.</para>
      <para>To be able to customize the display of your document it is crucial to understand its XML structure well. Each of processing models needs to be aimed
        at a particular XML element and sometimes is only meant for a specific XML context - let's say we might want to distinguish between headings of first
        and second level of nested divisions as they often represent titles of different text units: acts and scenes or books and chapters.</para>
      <para>We'll start with the Graves' letter you have already viewed applying your custom ODD in previous section. The display is quite simple and easy to
        read but we might want to adjust it to follow common visual conventions for a letter, starting with displaying the dateline on the right hand side and
        completely removing the page label which currently sits there.</para>
      <para> To create a processing model addressing this need we have to know 3 things: <emphasis role="bold">when</emphasis> should it be applied, <emphasis
          role="bold">what</emphasis> is supposed to happen and <emphasis role="bold">how</emphasis> should the text be formatted? </para>
      <para> To be able answer the first question, you should familiarize yourself with the XML structure of the letter to find out how are datelines
        represented in TEI. On the tab displaying the letter, select <guimenuitem>Download</guimenuitem> / <guimenuitem>XML </guimenuitem>to open <link
          xlink:href="data/test/graves6.xml" role="source">
          <filename>graves6.xml</filename>
        </link> in eXide. Quick investigation of the TEI encoding will reveal that dateline resides in its eponymic tag <tag>dateline</tag> wchich is nested in
        the <tag>opener</tag> part of the document, while page labels are encoded with <tag>pb</tag>.</para>
      <para>We'll use the visual editor, but show the corresponding ODD XML below each screenshot. At the end of this chapter we'll describe how to edit the ODD
        XML <link linkend="oddxml">by hand</link>.</para>
      <section xml:id="visualodd">
        <title>First Steps</title>
        <para>The visual ODD editor opens if you select <guimenuitem>Admin</guimenuitem> / <guimenuitem>Edit ODD</guimenuitem> from the menu while viewing a
          document. Alternatively you can click on the name of an ODD in the list of ODDs on the TEI Publisher entry page. A new tab opens, showing an action
          panel to the left, and the title of your ODD to the right.</para>
        <para>We need to overwrite the processing model rules for <tag>dateline</tag>. Enter <parameter>dateline</parameter> into the input box next to the
            <guibutton>New</guibutton> button in the left panel and click the button. This will insert a processing model rule for <tag>dateline</tag> into the
          right panel. Because <tag>dateline</tag> already exist in the base ODD, <filename>tei_simplePrint.odd</filename>, you'll see a single model which was
          copied from the base ODD.</para>
        <figure>
          <title>Screen after adding <tag>dateline</tag>
          </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="editor-screen1.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The corresponding ODD XML looks like this:</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="dateline"&gt;
    &lt;model behaviour="block"/&gt;
&lt;/elementSpec&gt;</programlisting>
        <para>Let's cover some key concepts of the TEI processing model first: <tag>elementSpec</tag> primarily documents the structure, content, and purpose of
          an element. It is a core element in any ODD but the schema-related functions are not relevant for the discussion here. What is important for us is
          this is where processing models are defined. The <parameter>@ident</parameter> attribute of the <tag>elementSpec</tag> identifies the name of the
          element to which the spec (and therefore processing model) applies.</para>
        <para>An <tag>elementSpec</tag> may contain one or more <tag>model</tag> elements to specify the intended processing of this element. Every model maps
          the element to a <option>behaviour</option>. A behaviour denotes an abstract transformation function to be applied. The TEI guidelines currently list
          two dozen behaviours, e.g. paragraph, heading, note, inline, block. The last two are the most frequently used. How exactly a behaviour translates into
          the target output media may differ depending on media features and design decisions. TEI Publisher tries to implement them as generic as
          possible.</para>
        <para>To change the model expand it by clicking on the arrow to the left of the grey box. A form appears, allowing you to change the model
          configuration. In our example we are happy with <emphasis>what</emphasis> is happening with the dateline, so we don't need to change the behaviour but
          we do want to fix <emphasis>how</emphasis> it is styled by justifying it to the right. Rendition can be defined in an <tag>outputRendition</tag>, so
          click on the <guibutton>+</guibutton> button next to <guilabel>Renditions</guilabel>. In the form input being inserted below, enter your styling
          requirements in css.</para>
        <para>The processing model uses <tag>outputRendition</tag> and CSS to define visual aspects. For output formats other than XML, the CSS is translated
          into the corresponding target language. It is thus best to limit the CSS to the most common typographical features, like bold, italic, color,
          underline etc. The general styling of the text should be done outside the ODD to maintain a clear separation of concerns.</para>
        <figure>
          <title>Add a rendition for <tag>dateline</tag>
          </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="editor-screen2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Again here's the corresponding XML:</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="dateline"&gt;
  &lt;model behaviour="block"&gt;
      &lt;outputRendition&gt;text-align: right;&lt;/outputRendition&gt;
  &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
        <para>To test your change, click on <guibutton>Save</guibutton> in the left panel and wait a second until a popup appears. Switch back to the tab with
          Graves' letter from which you opened the editor and refresh the browser window to see your changes applied. In case you do not see any change, make
          sure</para>
        <orderedlist>
          <listitem>
            <para>you selected the correct ODD for viewing (check the settings drawer)</para>
          </listitem>
          <listitem>
            <para>if you made changes to outputRenditions only, you may need to clear your browser's cached version. For most browsers, holding the shift key
              while clicking on the reload button does the job.</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>Other behaviours</title>
        <para>We would also like to hide the page breaks as we do not have facsimiles available. Add a new element spec for <tag>pb</tag>. Again the newly added
          spec already includes a model with behaviour <option>break</option>. Just change this behaviour to <option>omit</option> or delete the existing model
          and insert a fresh one with behaviour <option>omit</option>.</para>
        <figure>
          <title>Omit <tag>pb</tag>
          </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="editor-screen3.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="pb"&gt;
  &lt;model behaviour="omit"/&gt;
&lt;/elementSpec&gt;</programlisting>
      </section>
      <section>
        <title>Predicates and multiple models</title>
        <para>Next up, we may want to highlight the various places and people occurring within the text. They are all marked up with the <tag>name</tag> tag,
          using different <option>@type</option> attributes. Create a new element spec for <tag>name</tag> and supply some color to the names.</para>
        <figure>
          <title>Color the <tag>name</tag> tags </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="editor-screen4.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>And the XML for the entire <tag>elementSpec</tag>:</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec ident="name" mode="change"&gt;
    &lt;model behaviour="inline"&gt;
        &lt;outputRendition&gt;
        color: #FF9900;
        &lt;/outputRendition&gt;
    &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
        <para>This rule affects places and people alike since both these categories are marked up with <tag>name</tag> tag. If we'd like to treat people and
          places differently we'd need separate models for them and a mechanism to distinguish between the two. The processing model uses
            <option>predicate</option> to make such distinctions: a model rule will only be used if the XPath expression in its predicate matches the current
          node being processed. Let's add another model and give it a predicate:</para>
        <figure>
          <title>Distinguish places and people</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="editor-screen5.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec ident="name" mode="change"&gt;
    &lt;model predicate="@type='place'" behaviour="inline"&gt;
        &lt;outputRendition &gt;
        color: #0077FF;
        &lt;/outputRendition&gt;
    &lt;/model&gt;
    &lt;model behaviour="inline"&gt;
        &lt;outputRendition&gt;
        color: #FF9900;
        &lt;/outputRendition&gt;
    &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
        <note>
          <title>Important</title>
          <para>The order of models within the element spec is important. If you move the model with the predicate to the bottom, all names will appear in the
            same color again. This happens because the processor walks through the models until it finds the first one matching the current node. If the model
            without predicate is first, it will always win over the one with the predicate!</para>
          <para>Also, if there's more than one matching model, only the first will be chosen.</para>
        </note>
      </section>
      <section>
        <title>Parameters</title>
        <para>All behaviours accept one or more parameters which are defined in the TEI guidelines. Every behaviour has an implicit parameter called
            <parameter>content</parameter>, and, as the name suggests, it specifies which part of the source document should be processed: by default it uses
          the nested content of the node. You may overwrite this default and assign it another value. Some behaviours take other specialized parameters. For
          example, the behaviour <function>alternate</function> accepts two parameters: <parameter>default</parameter> and <parameter>alternate</parameter>. An
          alternate switches between two alternative states. On the web this could take the form of a popup, in print it is usually implemented as a
          footnote.</para>
        <para>To put this to a test, let's look at the <tag>date</tag> elements appearing within the letter. Most of them also specify a normalized date in
          their <parameter>@when</parameter> attribute. Seeing this may be helpful for the reader, for example, to know that the <parameter>19th</parameter>
          mentioned in the postscript refers to <parameter>1957-12-19</parameter>. However, we may want to present the normalized date in a more readable way.
          XPath has a function <function>format-date</function> for the purpose and we could use it to show a representation of the date nicely formatted in the
          user's language.</para>
        <para>Add a new element spec for <tag>date</tag>. You'll already see 4 predefined models. The first two are for print only, but the third one does
          indeed use behaviour <function>alternate</function>, which is exactly what we want. Change the parameter value for <parameter>alternate</parameter> to
          format the date:</para>
        <figure>
          <title>Format the normalized date in <parameter>@when</parameter>
          </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="editor-screen6.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec ident="date" mode="change"&gt;
    &lt;model output="print" predicate="text()" behaviour="inline"/&gt;
    &lt;model output="print" predicate="@when and not(text())" behaviour="inline"&gt;
        &lt;param name="content" value="@when"/&gt;
    &lt;/model&gt;
    &lt;model output="web" predicate="@when" behaviour="alternate"&gt;
        &lt;param name="default" value="."/&gt;
        &lt;param name="alternate" value="format-date(@when, '[FNn], [D1o] [MNn], [Y]')"/&gt;
    &lt;/model&gt;
    &lt;model predicate="text()" behaviour="inline"/&gt;
&lt;/elementSpec&gt;</programlisting>
      </section>
      <section>
        <title>Screencast</title>
        <para>The screencast below recapitulates some of the modifications we just applied. It uses an older version of TEI Publisher, but the basic concepts
          and controls are still the same:</para>
        <figure xml:id="edit-odd">
          <title>Screencast</title>
          <mediaobject>
            <videoobject>
              <videodata fileref="https://www.youtube.com/embed/avRO-b2BwUI?rel=0" width="853" depth="480"/>
            </videoobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="oddxml">
        <title>Edit the ODD XML by hand</title>
        <para>To switch to the XML source code of the currently edited ODD from within the visual editor, click on the button with the angle brackets in the
          toolbar of the left side panel. If you made changes in the form, you need to save first to update the ODD. The ODD XML will be opened in a new tab,
          showing eXist's browser-based editor, eXide.</para>
        <para>While using eXide is sufficient for small edits, we really recommend using specialized XML editor like oXygen for serious work on your TEI files.
          It will help you with many tasks, starting with the syntax and documentation. You can edit ODDs stored in eXist using Oxygen's webdav support or the
          eXist data source.</para>
        <note>
          <title>Important</title>
          <para>If you edit the ODD XML by hand, there are some caveats you need to be aware of: the visual editor will automatically check if there are
            existing <tag>elementSpec</tag>s for a new element in any of the ODDs your ODD inherits from. When editing by hand, you need to do this yourself.
            It's best to always have the base ODDs: <link xlink:href="odd/tei_simplePrint.odd" role="source">
              <filename>tei_simplePrint.odd</filename>
            </link> and <link xlink:href="odd/teipublisher.odd" role="source">
              <filename>teipublisher.odd</filename>
            </link> open on the side. Both are located in the same collection as your odd, i.e. <filename>/db/apps/tei-publisher/odd</filename>.</para>
          <para>For example, to modify the element spec for <tag>dateline</tag>, check <filename>tei_simplePrint.odd</filename>, where you'll find a definition
            already. Copy it over to your ODD and start modifying it.</para>
          <para>Pay attention to the <option>@mode</option> attribute on <tag>elementSpec</tag>. You must set this to <parameter>change</parameter> if you are
            overwriting an elementSpec which already exists in the inherited ODDs. If not, set it to <parameter>add</parameter>.</para>
        </note>
        <para>To test any changes, switch back to the tab in which you viewed your document (e.g. Graves' letter) and select <guimenuitem>Admin</guimenuitem> /
            <guimenuitem>Recompile ODD</guimenuitem> from the menu.</para>
      </section>
    </section>
    <section>
      <title>Modifying Page Templates</title>
      <para>As described earlier, the various sample documents included in the TEI Publisher release differ not only in the ODD they use, but also concerning
        the general layout and composition of the page. They are based on different HTML templates, which can be found in the
          <filename>templates/pages</filename> collection of the TEI Publisher app. Each template assembles various building blocks in a slightly different way.
        While the <emphasis>Shakespeare</emphasis> example shows a facsimile view next to the text, <emphasis>Orlik's</emphasis> letter to <emphasis
          role="italic">Mikołaj Serafin</emphasis> features a parallel display of Latin transcription and Polish translation, and <emphasis>Graves'</emphasis>
        letter includes a map and a sidebar with additional information on semantic items in the letter. Which template is being used is determined by a <link
          linkend="pi-config">processing instruction</link> in the TEI sources of those examples.</para>
      <para>All those building blocks come as custom HTML elements, which are easy to write and modify. Each of them encapsulates a certain functionality and
        appearance. The map, the facsimile, but also the text view itself and all controls are custom HTML elements. They are like "Lego" blocks which can be
        freely moved around and rearranged without knowing anything about the internal logic or complexity of the component.</para>
      <section xml:id="webcomponents">
        <title>Web Components</title>
        <para>The technology enabling this is an upcoming W3C standard called <emphasis>Web Components</emphasis>. It is already built into many browsers and
          support is improving quickly, reducing the need for external frameworks. There's a growing collection of ready-to-use components available, e.g. the
          Polymer components we use for menus, buttons, dropdowns etc. TEI Publisher 4.0 adds a collection of Web Components targetted at creating digital
          editions.</para>
        <para>You do not need to know much about <emphasis>Web Components</emphasis> to use them in TEI Publisher. Each component has a defined API, including
          properties, methods and events. From a user perspective, a component looks like any other HTML element, but it bundles HTML markup along with local
          CSS and JavaScript into a single file. You configure it by setting its properties via attributes. For example, the following HTML code snippet will
          display the first page/section of two completely different documents:</para>
        <programlisting language="xml" xml:space="preserve">&lt;pb-document id="document1" path="test/kant_rvernunft_1781.TEI-P5.xml" odd="dta" view="page"&gt;&lt;/pb-document&gt;
&lt;pb-document id="document2" path="doc/documentation.xml" odd="docbook" view="div"&gt;&lt;/pb-document&gt;

&lt;!-- Display two document views side by side --&gt;
&lt;main&gt;
    &lt;pb-view id="view1" src="document1"&gt;&lt;/pb-view&gt;
    &lt;pb-view id="view2" src="document2"&gt;&lt;/pb-view&gt;
&lt;/main&gt;</programlisting>
        <para>
          <tag>pb-document</tag> and <tag>pb-view</tag> are two web components provided by TEI Publisher, while <tag>main</tag> is a standard HTML5 tag. The
          custom element of a webcomponent <emphasis role="bold">must</emphasis> start with a prefix to distinguish it from standard HTML. This concept should
          be familiar to XML people. For TEI Publisher components, the prefix is always <code>pb-</code>. Components from other sources will use different
          prefixes, e.g. <code>paper-</code> and <code>iron-</code> for the Polymer collection.</para>
        <note>
          <title>Caveat</title>
          <para>Some properties of pb-view and other components are boolean properties. In HTML5 this corresponds to an attribute without value, which is
            illegal in XML. If you want to preserve valid XML, just write the attribute with the same name and value, e.g.
              <code>append-footnotes="append-footnotes"</code>.</para>
        </note>
        <para>
          <tag>pb-document</tag> states some metadata about a document source, which can then be referenced by id from other components. In the example above,
          we define three properties for each document:</para>
        <variablelist>
          <varlistentry>
            <term>path</term>
            <listitem>
              <para>the relative path to the XML document. This will be relative to the <emphasis>data root collection</emphasis> of TEI Publisher, by default
                pointing to the <filename>data</filename> collection with the TEI Publisher app.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <variablelist>
          <varlistentry>
            <term>odd</term>
            <listitem>
              <para>the name - without suffix - of the ODD to use for rendering the document. In the example, the first document is TEI and transformed through
                  <filename>dta.odd</filename>, while the second is docbook and passed through <filename>docbook.odd</filename>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <variablelist>
          <varlistentry>
            <term>view</term>
            <listitem>
              <para>this property determines how the document will be paginated if the user navigates forward/backward. Currently three possible methods are
                available:</para>
              <orderedlist>
                <listitem>
                  <para>
                    <parameter>div</parameter>: displays one structural division (TEI div, docbook section …) at a time</para>
                </listitem>
                <listitem>
                  <para>
                    <parameter>page</parameter>: displays the document page by page. This requires page break indicators to be present (<tag>pb</tag> in TEI,
                    not supported for docbook).</para>
                </listitem>
                <listitem>
                  <para>
                    <parameter>single</parameter>: the entire document (or a selected fragment of it) is displayed at once</para>
                </listitem>
              </orderedlist>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          <tag>pb-view</tag> is the most important component in TEI Publisher: it provides the actual text view by transforming a part or all of the source XML
          into HTML based on the processing model instructions in the ODD. Because webcomponents are all about encapsulation, <tag>pb-view</tag> ensures that
          the styling of the text as governed by the ODD will be confined within the boundaries of the component. This makes it possible to display two
          completely heterogenous texts (like the documentation and Kant's Kritik) on the same page without styles getting messed up. As a downside,
          encapsulation also poses some challenges, mainly concerning the communication between components, which we will cover <link linkend="external-css"
            >further below</link>.</para>
        <para>To better understand the various components TEI Publisher provides, it is best to have a look at the small examples contained in the <link
            xlink:href="../components/docs.html">web components API documentation</link>. The list of components may be overwhelming at first sight. However you
          don’t need to learn them all. There are a just a few components that should be understood before you start customizing. Their demo pages showcase a
          working example along with the code snippet which actually implements it. In particular you may want to look at the following examples:</para>
        <variablelist>
          <varlistentry>
            <term>
              <link xlink:href="../components/docs.html#/elements/pb-document/demos/demo/pb-document.html">pb-document</link>
            </term>
            <listitem>
              <para>shows the example given above in action</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="../components/docs.html#/elements/pb-view/demos/demo/pb-view.html">pb-view</link>
            </term>
            <listitem>
              <para>adds navigation buttons to read the document page by page</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="../components/docs.html#/elements/pb-facsimile/demos/demo/pb-facsimile.html">pb-facsimile</link>
            </term>
            <listitem>
              <para>display facsimiles via IIIF server and link to them</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="../components/docs.html#/elements/pb-leaflet-map/demos/demo/pb-leaflet-map.html">pb-leaflet-map</link>
            </term>
            <listitem>
              <para>show a map and link to geo coordinates</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="../components/docs.html#/elements/pb-load/demos/demo/pb-load.html">pb-load</link>
            </term>
            <listitem>
              <para>call a server-side XQuery to retrieve additional information about the document, in this case actors appearing in the play</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="../components/docs.html#/elements/pb-search/demos/demo/pb-search.html">pb-search</link>
            </term>
            <listitem>
              <para>execute a search on the database, retrieve the results and paginate through them</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="../components/docs.html#/elements/pb-grid/demos/demo/pb-grid.html">pb-grid</link>
            </term>
            <listitem>
              <para>dynamically add more columns to a horizontal grid of components</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section>
        <title>Communication between Components</title>
        <para>To allow for maximum flexibility, nearly all of the TEI Publisher webcomponents communicate via events: this way there's no hard wiring and
          components may appear anywhere on the page. For example, the controls for paginating through a document do not directly talk to the document view:
          they just send an <emphasis>event</emphasis>, indicating the users' wish to navigate backward or forward. Components listening to this event may then
          react to it by refreshing the text being displayed.</para>
        <para>Since you can have multiple text views showing content from different sources, every event can be targetted at a specific
            <emphasis>channel</emphasis>. This allows us to distinguish between different sources, e.g. two transcriptions being shown side by side. Most TEI
          Publisher components therefore accept two properties to configure the channel they are listening or sending events to:</para>
        <variablelist>
          <varlistentry>
            <term>subscribe</term>
            <listitem>
              <para>name of the channel to which this component subscribes to. It will only react to events coming in via this channel.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>emit</term>
            <listitem>
              <para>name of the channel to which this components sends events.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>If neither of these properties is given, the component will subscribe and emit to the global default channel. A component may also send to a
          different channel than it subscribes to, allowing chains of events.</para>
        <para>The common properties and methods accepted by many TEI Publisher components are defined in the class <link
            xlink:href="../components/docs.html#/mixins/PbMixin">PbMixin</link>.</para>
      </section>
      <section>
        <title>Page Templates</title>
        <para>Excluding the documentation, TEI Publisher currently includes 6 page templates, which combine the building blocks described above with
          off-the-shelf components to achieve a certain page layout and composition. If you look at the HTML code, you'll see a mix of
            <parameter>pb-</parameter> elements and <parameter>app-</parameter>, <parameter>paper-</parameter>, <parameter>iron-</parameter> elements. The last
          three belong to the Polymer collection and you can find them documented in the public <link xlink:href="https://www.webcomponents.org/">webcomponent
            registry</link>. TEI Publisher components are not yet available there, though we may move some of the general purpose components there later.</para>
        <para>To avoid redundancy, the files use eXist's templating feature to drag in some repeating parts which are the same for all pages, for example, the
          toolbar and the menu. You'll find those files in the corresponding sub-collection:</para>
        <programlisting xml:space="preserve">&lt;app-toolbar data-template="templates:include" data-template-path="templates/menu.html"/&gt;
&lt;app-toolbar data-template="templates:include" data-template-path="templates/toolbar.html"/&gt;</programlisting>
        <para>The following page templates are currently available in TEI Publisher:</para>
        <variablelist>
          <varlistentry>
            <term>
              <link xlink:href="templates/pages/view.html" role="source">view.html</link>
            </term>
            <listitem>
              <para>the default template showing a single text view at the center</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="templates/pages/facsimile.html" role="source">facsimile.html</link>
            </term>
            <listitem>
              <para>a template featuring a facsimile view to the right, retrieving images from a IIIF server</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="templates/pages/letter.html" role="source">letter.html</link>
            </term>
            <listitem>
              <para>used for Graves' letter, this template displays an additional map to the right and a list of places, people and organizations</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="templates/pages/translation.html" role="source">translation.html</link>
            </term>
            <listitem>
              <para>shows a transcription and its translation side by side. Both are contained in the same TEI document and extracted via an XPath expression
                passed to <tag>pb-view</tag></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="templates/pages/cortez-with-translation.html" role="source">cortez-with-translation.html</link>
            </term>
            <listitem>
              <para>similar to <filename>translation.html</filename> but the alignment between
              transcription and translation is more complex as the translation contains no page
              breaks. The part of the translation corresponding to a given fragment of the
              transcription thus needs to be computed dynamically for each page, using an XQuery
              function (defined by the <parameter>map</parameter> on <tag>pb-view</tag>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <link xlink:href="templates/pages/cortez" role="source">cortez.html</link>
            </term>
            <listitem>
              <para>like above but with additional facsimile panel</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><link xlink:href="templates/pages/vangogh.html" role="source">vangogh.html</link></term>
            <listitem>
              <para>demonstrates three columns by default: a metadata column, a transcription which can be switched
                to a diplomatic view including line endings, and a translation. Other columns, e.g. facsimile or commentary can be added dynamically.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <note>
          <title>Important Note</title>
          <para>The page templates are meant as examples to be copied and modified by users.
          They were written to match the concrete example and do not intend to be universal.
          TEI is too heterogenous to provide a one-size-matches-all solution. We thus believe that
          providing a wide range of practical examples is the best way to help users realize their
          own project.</para>
          <para>Only the generic
          template, <filename>view.html</filename> should work with all example TEI documents.</para>
        </note>
      </section>
      <section>
        <title>Create your own Template</title>
        <para>To create your own template, just open one of the existing templates in e.g. eXide (by clicking the links in the list above), save it under a
          different name into the same collection (<filename>templates/pages</filename>) and reload the document view it should apply to. You can now switch to
          your new template, either by</para>
        <orderedlist>
          <listitem>
            <para>using the <guimenuitem>template</guimenuitem> dropdown in the settings panel</para>
          </listitem>
          <listitem>
            <para>adding a parameter <parameter>template=mytemplate.html</parameter> to the URL showed by the browser</para>
          </listitem>
          <listitem>
            <para>adding a <link linkend="pi-config">processing instruction</link> to a TEI document to make a specific template the default:</para>
            <synopsis>&lt;?teipublisher template="translation.html" odd="dantiscus.odd" view="page"?&gt;</synopsis>
          </listitem>
        </orderedlist>
        <para>Global CSS styling in the template should be written into a <tag>custom-style</tag> element wrapping around a <tag>style</tag> element which
          includes <parameter>pb-common-styles</parameter>. This special construct is needed so we can use properties and mixins exposed by the web components.
          As described above, a web component completely encapsulates its content, so it cannot be styled from outside. It may expose custom style variables and
          mixins as variables to the outside world though. For example, we may style the appearance of the footnote section below the main text as
          follows:</para>
        <programlisting>&lt;custom-style>
    &lt;style include="pb-common-styles">
        body {
             --pb-footnotes: {
                 padding-top: 10px;
                 margin-top: 20px;
                 border-top: 1px solid #C0C0C0;
             };
        }
    &lt;/style>
&lt;/custom-style></programlisting>
        <para>--pb-footnotes is a <link xlink:href="https://polymer-library.polymer-project.org/2.0/docs/devguide/custom-css-properties">custom CSS
          mixin</link>. The <tag>pb-view</tag> component defines it in its API and will <emphasis>mix in</emphasis> the contained CSS rules into the styles for
          the footnotes section.</para>
        <para>While you cannot change the inner appearance of a component except by setting its custom CSS properties, you can style the component itself within
          the HTML template, e.g. to position it within the layout of the page etc.</para>
      </section>
      <section xml:id="alignment">
        <title>Handling Complex Alignments</title>
        <para>It is often desirable to show two or more views of a document at the same time, for example to display the translation aligned with a given source
          fragment. In the simplest case, the transcription and translation may be aligned on the level of divisions or page breaks and one can simply use two
            <tag>pb-view</tag> referencing different starting points in the TEI document (this approach is implemented by the <link
            xlink:href="templates/pages/translation.html" role="source">translation.html</link> template for Serafin's letter).</para>
        <para>Unfortunately things are not always as simple as that. For example, even if the transcription contains page breaks or milestones which can be used
          to display a single page, the translation might not. One thus needs a different approach to compute the alignment between fragments. Nevertheless, the
          logic of the alignment algorithm will highly depend on the conventions used in the encoding. TEI allows a wide variety of alignment mechanisms and we
          do not want to limit the freedom of the editor by prescribing a particular method.</para>
        <para>TEI Publisher thus implements a generic way to plug an XQuery function into the processing pipeline. The function takes the source element being
          processed as input and may replace it by its aligned equivalent. Such an equivalent may be another element or fragment from the same or a different
          document. The source element will usually point to the part of the transcription being displayed. The mapping function uses this as starting point to
          determine an aligned fragment and returns it. The returned fragment will then be further passed through the processing model.</para>
        <para>The XQuery mapping function should be defined in the module <filename>modules/map.xql</filename>. It takes an element as its only argument and may
          return any valid TEI fragment, which will become the input for futher processing through the processing model.</para>
        <para>The local name of the mapping function can then be supplied in the attribute <parameter>map</parameter> of <tag>pb-view</tag>. As an illustration,
          the Van Gogh example includes the following <code>pb-view</code> for displaying the translation:</para>
        <programlisting language="xquery">&lt;pb-view src="document1" map="vg-translation" xpath="//div[@type='original']"
    subscribe="transcription"/></programlisting>
        <para>In the Van Gogh letters, the translation contains page breaks corresponding to page breaks in the original letter, but these are using a different
          prefix for the xml:id. To align the translation with the transcription, we only need to adjust the id, and retrieve the corresponding page break to be
          done. The XQuery mapping function is thus rather simple:</para>
        <programlisting language="xquery">declare function mapping:vg-translation($root as element()) {
    let $id := ``[pb-trans-`{$root/@f}`-`{$root/@n}`]``
    let $node := root($root)/id($id)
    return
        $node
};</programlisting>
        <para>Note that returning the corresponding <tag>pb</tag> node of the translation is sufficient here as further processing will automatically extract
          the page fragment up to the next <tag>pb</tag>. More complex cases may require that mapping function returns arbitrary TEI fragment. Also note that
          the <parameter>xpath</parameter> attribute of the <tag>pb-view</tag> element in the template must still point to the source transcription
            (<parameter>div[@type='original']</parameter> in this case). It's just the mapping function which translates a position in the source transcription
          to a corresponding fragment in the translation.</para>
        <para>The letter by Cortez to Dantiscus sent from Mexico demonstrates a much more sophisticated alignment, determining the translation fragment to be
          shown by inspecting the ID range of the transcription. It illustrates the case where no milestone elements exist in the translation to explicitly mark
          page boundaries of the original, thus mapping algorithm aims to display closest corresponding fragment of the translated text.</para>
      </section>
    </section>
  </section>
  <section>
    <title>Advanced Customization</title>
    <section xml:id="pm-syntax">
      <title>Processing Model syntax</title>
      <section>
        <title>
          <tag>model</tag> element</title>
        <para>
          <tag>model</tag> element is primarily used to document intended processing for a given element. One or more of these elements may appear directly
          within an <tag>elementSpec</tag> element specification to define the processing anticipated for that element. Where multiple <tag>model</tag> elements
          appear, they are understood to document mutually exclusive processing scenarios, possibly for different outputs or applicable in different contexts. </para>
        <para>A processing model defines on an abstract level how a given element may be transformed to produce one or more outputs. The model is expressed in
          terms of <emphasis>behaviours</emphasis> and their parameters, using high-level formatting concepts, such as <command>block</command>,
            <command>inline</command>, <command>note</command> or <command>heading</command>. A processing model is thus a template description, used to
          generate the code needed by the publishing application to process the source document into required output. </para>
        <para> Example below depicts a situation where a single model is defined for <tag>app</tag> element. As no @predicate or @output are specified, this
          model applies for all contexts in which <tag>app</tag> may appear and all possible outputs. Thus all <tag>app</tag> elements will be transformed into
          inline chunks of text containing only contents of <tag>app</tag>'s <tag>lem</tag> child and omitting any possible <tag>rdg</tag> children.</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="app"&gt;
  &lt;model behaviour="inline"&gt;
    &lt;param name="content" value="lem"/&gt;
  &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
      <section>
        <title>
          <tag>model</tag> children and attributes:</title>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                <varname>@predicate</varname>: the condition under which this model applies, given as an XPath Predicate Expression</para>
            </listitem>
            <listitem>
              <para>
                <varname>@behaviour</varname>: names the function which this processing model uses in order to produce output; possible values include:
                alternate, block, figure, heading, inline, link, list, note, paragraph</para>
            </listitem>
            <listitem>
              <para>
                <varname>@output</varname>: identifier of the intended output for which this model applies; applies to all output if no @output is present on a
                  <tag>model</tag>
              </para>
            </listitem>
            <listitem>
              <para>
                <varname>@useSourceRendition</varname>: whether to obey any rendition attribute which is present in the source document</para>
            </listitem>
            <listitem>
              <para>
                <varname>@cssClass</varname>: one or more CSS class names which should be added to the resulting output element where applicable</para>
            </listitem>
            <listitem>
              <para>
                <tag>param</tag>: allows to pass parameters to @behaviour function; parameters available depend on the behaviour in question; when parameters
                are not explicitly passed, default values for those are assumed; all behaviour functions use current element as default content</para>
            </listitem>
            <listitem>
              <para>
                <tag>outputRendition</tag>: supplies information about the desired output rendition in CSS; its attribute @scope provides a way of defining
                ‘pseudo-elements’ eg: first-line, first-letter, before, after </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>Simple model explicitly specifying content parameter: for <tag>app</tag> entries only content of its <tag>lem</tag> child is to be displayed (as
          an inline chunk of text):</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="app"&gt;
  &lt;model behaviour="inline"&gt;
    &lt;param name="content" value="lem"/&gt;
  &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
        <para>Model specifying output rendition: contents of <tag>ex</tag> elements are to be displayed in italic and wrapped in parentheses:</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="ex"&gt;
  &lt;model behaviour="inline"&gt;
    &lt;outputRendition&gt;font-style: italic;&lt;/outputRendition&gt;
    &lt;outputRendition scope="before"&gt;
      content:"(";&lt;/outputRendition&gt;
    &lt;outputRendition scope="after"&gt;content:")";&lt;/outputRendition&gt;
  &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
        <para>Sometimes different processing models are required for the same element in different contexts. For example, we may wish to process the
            <tag>quote</tag> element as an inline italic element when it appears inside a <tag>p</tag> element, but as an indented block when it appears
          elsewhere. To achieve this, we need to change the specification for the <tag>quote</tag> element to include two <tag>model</tag> elements as
          follows:</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="quote"&gt;
  &lt;model predicate="ancestor::p" behaviour="inline"&gt;
    &lt;outputRendition&gt;font-style: italic;&lt;/outputRendition&gt;
  &lt;/model&gt;
  &lt;model behaviour="block"&gt;
    &lt;outputRendition&gt;
      left-margin: 2em;
    &lt;/outputRendition&gt;
  &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
        <para>The first processing model will be used only for <tag>quote</tag> elements which match the XPath expression given as value for the
            <varname>@predicate</varname> attribute. Other element occurrences will use the second processing model. Set of multiple <tag>model</tag> statements
          is regarded as an alternation and only the first model with <varname>@predicate</varname> matching current context is applied.</para>
      </section>
        <section>
          <title>Output formatting</title>
        <para>The intended rendering for a particular behaviour of a processing model may be documented in one or all of the three following ways. Firstly, the
            <varname>@cssClass</varname> attribute may be used to specify the name of a CSS style in some associated CSS stylesheet which is to be applied to
          each occurrence of a specified element found (in a given context, for a specified output). Secondly, the attribute
            <varname>@useSourceRendition</varname> may be used to indicate that the rendition specified in the source document should be applied. Thirdly, the
          styling to be applied may be specified explicitly as content of a child <tag>outputRendition</tag> element. </para>
        <para> When more than one of these options is used, they are understood to be combined in accordance with the rules for multiple declaration of the
          styling language used. </para>
        <para> It is strongly recommended that use <tag>outputRendition</tag> should be limited to strictly editorial decisions, such as 'conjectures are to be
          displayed in square brackets' and not as means to record all typesetting and layout specific design choices.</para>
        <para>The processing model library translates the CSS styles into the target media format. Restrictions apply due to differences between the output
          formats. Not all CSS properties are supported for every format. Please refer to the section on <link linkend="output-media">Output media
            settings</link> for further information.</para>
        </section>
      </section>
      <section>
        <title>
          <tag>modelSequence</tag> and <tag>modelGrp</tag>
        </title>
        <para> Summary of elements that can be used to document one or more processing models for a given element: <itemizedlist>
            <listitem>
              <para>
                <tag>model</tag> describes the processing intended for a specific context </para>
            </listitem>
            <listitem>
              <para>
                <tag>modelSequence</tag> (sequence of processing models) a group of model elements documenting intended processing models for this element, to
                be acted upon in sequence </para>
            </listitem>
            <listitem>
              <para>
                <tag>modelGrp</tag> (processing model group) a group of model elements documenting intended processing models for this element </para>
            </listitem>
          </itemizedlist>
        </para>
        <para> The <tag>modelGrp</tag> element may be used to group alternative <tag>model</tag> elements intended for a single kind of output. The
            <tag>modelSequence</tag> element is provided for the case where a sequence of models is to be processed, functioning as a single unit. Common use
          case would be to use modelSequence to generate table of contents along with the reading text as shown in the example below:</para>
        <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="body"&gt;
  &lt;modelSequence&gt;
    &lt;model behaviour="index"&gt;
      &lt;param name="type" value="'toc'"/&gt;
    &lt;/model&gt;
    &lt;model behaviour="block"/&gt;
  &lt;/modelSequence&gt;
&lt;/elementSpec&gt;</programlisting>
      </section>
    </section>
    <section>
      <title>Behaviours</title>
      <para>The <link xlink:href="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/ref-model.html">TEI guidelines</link> document a number of default
        behaviours. TEI Publisher allows users to add their own behaviours, either within the ODD itself or by writing <link linkend="extension-modules">XQuery
          code</link>. The following section lists the default behaviours.</para>
      <section>
        <title>Available Behaviours</title>
        <para>Behaviour functions accept a range of parameters, depending on the function in question. Where these parameters are left unspecified in the
            <tag>model</tag>, default values are used. All functions take at least one parameter: <parameter>content</parameter>. It will be added by default
          unless specified and contains the nested content of the currently processed node. You may change this by explicitely setting a
            <parameter>content</parameter> parameter inside the model.</para>
        <para>In the parameter lists below we skip the <parameter>content</parameter> parameter as it is available for every behaviour. Optional parameters are
          marked as <emphasis>optional</emphasis> in parenthesis, followed by the output mode they apply for, if relevant.</para>
        <variablelist>
          <varlistentry>
            <term>alternate</term>
            <listitem>
              <para>Display alternating elements for displaying the preferred version and an alternative, both at once or by some method of toggling between the
                two. The concrete implementation depends on the output format.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>default</td>
                    <td>the content to display by default</td>
                  </tr>
                  <tr>
                    <td>alternate</td>
                    <td>alternate content</td>
                  </tr>
                  <tr>
                    <td>persistent</td>
                    <td>(optional, web) show a persistent popup on click instead of a tooltip on hover if parameter evaluates to an effective boolean value of
                      true</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>anchor</term>
            <listitem>
              <para>Create an anchor to which you can link, identified by the given id.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>id</td>
                    <td>the id</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>block</term>
            <listitem>
              <para>Create a block structure, usually a div in HTML or fo:block in fo.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>body</term>
            <listitem>
              <para>Create the body of a document. In HTML this will result in a &lt;body&gt; tag.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>break</term>
            <listitem>
              <para>Create a line, column, or page break according to type.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>type</td>
                    <td>e.g. "page", "column", "line"</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>cell</term>
            <listitem>
              <para>Create a table cell. If the @cols or @rows attribute is specified, the cell may span several columns/rows.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>cit</term>
            <listitem>
              <para>Show a citation, with an indication of the source.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>source</td>
                    <td>the citation source</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>document</term>
            <listitem>
              <para>Start a new output document.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>figure</term>
            <listitem>
              <para>Make a figure with provided title argument as caption</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>title</td>
                    <td>a caption</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>graphic</term>
            <listitem>
              <para>Display the graphic retrieved from the given url.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>url</td>
                    <td>the url to load the graphic from</td>
                  </tr>
                  <tr>
                    <td>width</td>
                    <td>the width of the graphic, e.g. "300px", "50%" ...</td>
                  </tr>
                  <tr>
                    <td>height</td>
                    <td>the height of the graphic, e.g. "300px", "50%" ...</td>
                  </tr>
                  <tr>
                    <td>scale</td>
                    <td>a scaling factor to apply. If specified, width and height will be output as percentage based on the scaling factor, which should be a
                      number between 0 and 1.</td>
                  </tr>
                  <tr>
                    <td>title</td>
                    <td>a title for the graphics element. Usually not shown directly.</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>heading</term>
            <listitem>
              <para>Creates a heading.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>level</td>
                    <td>the structural level of this heading. In HTML mode, this translates to &lt;h1&gt;, &lt;h2&gt; etc.</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>inline</term>
            <listitem>
              <para>Outputs an inline element.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>link</term>
            <listitem>
              <para>Create a hyperlink.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>uri</td>
                    <td>the link url</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>list</term>
            <listitem>
              <para>Creates an ordered or unordered list, depending on the type attribute (e.g. <parameter>type="ordered"</parameter>). If a label is present
                before each item, a description list is output instead, using the label as definition term.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>type</td>
                    <td>The type of list: use "ordered" for an enumerated list, or "custom" to specify item labels
                    in combination with the <option>n</option> parameter on each <command>listItem</command>. The default
                    is "unordered" for a list of bullet points.</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>listItem</term>
            <listitem>
              <para>Outputs an item in a list.</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>n</td>
                    <td>a label to use for the item</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>metadata</term>
            <listitem>
              <para>Outputs a metadata section, e.g. a &lt;head&gt; in HTML.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>note</term>
            <listitem>
              <para>create a note, often out of line, depending on the value of <code>place</code>; could be "margin", "footnote", "endnote", "inline"</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>place</td>
                    <td>defines the placement of the note, e.g. "margin", "footnote" ...</td>
                  </tr>
                  <tr>
                    <td>label</td>
                    <td>the label to use for the footnote reference, usually a number.</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>omit</term>
            <listitem>
              <para> Do nothing, skip this element, do not process children </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>paragraph</term>
            <listitem>
              <para> Create a paragraph. </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>row</term>
            <listitem>
              <para> Create a table row. </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>section</term>
            <listitem>
              <para>Create a new section in the output document. In HTML mode, this translates to a &lt;section&gt; element being output.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>table</term>
            <listitem>
              <para>Create a table.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>text</term>
            <listitem>
              <para>Output literal text.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>title</term>
            <listitem>
              <para>Output the document title. In HTML mode, this creates a &lt;title&gt; element. In LaTeX, it adds the title to the document metadata.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>webcomponent (TEI Publisher extension)</term>
            <listitem>
              <para>Outputs a custom HTML element (usually referencing a webcomponent) using the value of parameter <parameter>name</parameter> as tag name. All
                other parameters are copied into corresponding attributes (properties of the webcomponent).</para>
              <informaltable>
                <thead>
                  <tr>
                    <td>Parameter</td>
                    <td>Description</td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>name</td>
                    <td>the tag name to use for the custom element. Must be a string value.</td>
                  </tr>
                </tbody>
              </informaltable>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section>
      <title>Extensions to the Processing Model Specification</title>
      <section>
        <title>XQuery Instead of XPath</title>
        <para>The implementation directly translates processing model instructions into an XQuery 3.1 module by generating executable XQuery code. This is
          straightforward as the resulting XQuery will closely resemble the specification in the ODD, thus being easy to debug. It also leads to very efficient
          code, which is as fast or even faster as a hand-written, optimized transformation.</para>
        <para>As a welcome side effect, any valid XQuery expression might be used wherever the spec expects an XPath expression, e.g. in predicates or
          parameters. For example, one can define variables inside a parameter using a standard XQuery <code language="xquery">let $x := ... return
          ...</code>.</para>
      </section>
      <section>
        <title>Default Processing Model Rules</title>
        <para>It is possible to define a default elementSpec to be applied to all elements which are not already matched by another elementSpec. For example, if
          no elementSpec is present for an element, its text content is output. To change this behaviour and omit content elements without specification, you
          may want to define a default elementSpec as shown below:</para>
        <programlisting>&lt;elementSpec ident="*"&gt; &lt;model behaviour="omit"/&gt; &lt;/elementSpec&gt;</programlisting>
        <para>You can also define models to be applied to all text nodes, e.g. if you need to normalize certain nodes:</para>
        <programlisting xml:space="preserve">&lt;elementSpec ident="text()"&gt; &lt;
  &lt;model behaviour="text"/&gt;
&lt;/elementSpec&gt;</programlisting>
        <para>Note that outputting text nodes is a performance critical operation, so use with care. Too complex processing will likely slow down rendering
          dramatically.</para>
      </section>
      <section xml:id="external-parameters">
        <title>External Parameters</title>
        <para>The script calling the processing model may pass external parameters into the ODD. They will be available in the variable
            <parameter>$parameters</parameter>, which is an XQuery map. Access parameters using the XQuery lookup operator.</para>
        <para>For example, one can use this feature to control how specific parts of the document are output, without having to define a separate output mode,
          which would result in much more code. Below we display a shortened header for the document, containing simply its title, but only if the parameter
          "header" is set to "short":</para>
        <programlisting language="xquery" xml:space="preserve">&lt;elementSpec mode="change" ident="fileDesc"&gt;
    &lt;model predicate="$parameters?header='short' behaviour="block" cssClass="header-short"&gt;
      &lt;param name="content" value="titleStmt"/&gt;
    &lt;/model&gt;
  ...
&lt;/elementSpec&gt;</programlisting>
        <para>The <tag>pb-view</tag> webcomponent also lets you define arbitrary parameters to be passed to the ODD via <tag>pb-param</tag>. For example, the breadcrumbs shown above this
          documentation page are realized by setting a parameter <parameter>mode</parameter> and can be queried in model predicates with
          <parameter>$parameters?mode='breadcrumbs'</parameter>.</para>
        <programlisting>&lt;section class="breadcrumbs"&gt;
    &lt;pb-view id="title-view1" src="document1" subscribe="transcription"&gt;
        &lt;pb-param name="mode" value="breadcrumbs"/&gt;
    &lt;/pb-view&gt;
&lt;/section&gt;</programlisting>
        <para>If the parameter is set, the processing model rules in the ODD will output the headings of all ancestor sections of the current division only,
          ignoring everything else. This approach helps to reuse the same ODD for viewing specific aspects of the document.</para>
        <para>A dedicated user interface webcomponent
        <link xlink:href="../components/docs.html#/elements/pb-toggle-feature/demos/demo/pb-toggle-feature.html"><tag>pb-toggle-feature</tag></link>
        exists for toggling between two values of a parameter. Example below would produce a checkbox which when on
        results in the value of <parameter>$parameters?mode</parameter> set to <parameter>diplomatic</parameter>, otherwise to <parameter>norm</parameter>.
        </para>
        <programlisting>&lt;pb-toggle-feature name="mode" on="diplomatic" off="norm"&gt;Diplomatic View&lt;/pb-toggle-feature&gt;</programlisting>
      </section>
      <section xml:id="external-css">
        <title>Including General CSS Styles</title>
        <para>Because TEI Publisher 4.0 is based on webcomponents, the styling of one document will not interfere with the styling of another document on the
          same page. All styles are strictly encapsulated within the component and do not "pollute" the global browser space. This also has a downside though:
          CSS rules defined outside the <tag>pb-view</tag> have no influence on the text styling inside the component (with some exceptions, mainly for
          properties which are inherited down the HTML tree, e.g. <parameter>font-family</parameter>).</para>
        <para>However, putting all styling information into <tag>outputRendition</tag> tags within the ODD is also not a good idea as it adds a lot of
          redundancy. One instead wants to use CSS classes for repeating styling aspects. To make this possible, TEI Publisher supports linking to an external
          CSS stylesheet within the header of an ODD. Alternatively, one may also use the TEI element <tag>rendition</tag> with the
            <parameter>@selector</parameter> attribute to specify single style rules directly in the ODD.</para>
        <para>Both types of rendition elements should go into <parameter>teiHeader/encodingDesc/tagsDecl</parameter>. To link to an external stylesheet, just
          include a relative link in the <parameter>@source</parameter> attribute:</para>
        <synopsis>&lt;rendition source="docbook.css"/></synopsis>
        <para>The file should be stored in the same collection as the source ODD it is referenced from. The linked file should be a standard CSS
          stylesheet. Unfortunately, editing renditions is not yet supported by the visual ODD editor, so you will have to fall back
        to add the corresponding elements to the ODD by hand.</para>
        <para>The other possibility is to embed CSS rules directly into <tag>rendition</tag> and define a CSS selector in the <parameter>@selector</parameter>
          attribute:</para>
        <programlisting>&lt;rendition selector="h3">
  font-family: serif;
  font-weight: 400;
&lt;/rendition></programlisting>
        <para>Choose one of the two approaches, but do not mix them. In both cases make sure to recompile the ODD after changes as the CSS is merged into the
          generated code!</para>
      </section>
      <section>
        <title>Code Templates and Custom Behaviours</title>
        <para>The two dozen behaviours defined by the TEI processing model are enough to cover most
          HTML output tasks, but other output formats like LaTeX may require more customization and control over
          the generated output. The TEI Publisher library thus extends the processing model
          syntax with two custom elements for defining code templates.</para>
        <para>While TEI Publisher does provide ways to write your own behaviours in XQuery and thus
          extend the ones defined in the guidelines, this should only be used as last resort:
          custom XQuery behaviours limit the portability of the ODD and are bad for maintenance.</para>
        <para>Avoiding custom behaviours works quite well for HTML output and we have
          realized complex projects with just two or three extension behaviours. Things start to
          become more difficult if you try to output LaTeX though: there are hundreds of packages to use,
          and users typically define their own macros or environments for all recurring
          typesetting tasks. For example, to print a TEI <tag>persName</tag>, experienced LaTeX
          users would normally create a corresponding <code>\persName</code> macro and handle the
          formatting details there. Unfortunately, out of the box the TEI processing model does not facilitate
          this level of customization.</para>
        <section xml:id="pb-template">
          <title>Introducing <tag>pb:template</tag>
          </title>
          <para>TEI Publisher thus supports an extension to the ODD syntax in its own namespace (<parameter>http://teipublisher.com/1.0</parameter>).</para>
          <para>
            Within the ODD, a <tag>model</tag> may define a <tag>pb:template</tag> element containing a code template. The template is
            expanded first and the result is passed into the behaviour specified for the model, replacing the default <parameter>content</parameter>
            parameter accepted by all behaviours. The very simple case of outputting a <tag>persName</tag> in LaTeX could thus be written as:</para>

          <programlisting language="xml" xml:space="preserve"><![CDATA[<elementSpec ident="persName" mode="add">
    <model behaviour="inline" output="latex">
        <pb:template>\persName{[[content]]}</pb:template>
    </model>
</elementSpec>]]></programlisting>
          <para>The template can reference other parameters defined within the <tag>model</tag> by enclosing the parameter name in double
            brackets. In the example above we're referencing
            the default parameter <parameter>content</parameter>, which contains the nested content of the <tag>persName</tag> tag. The
            parameter will be processed before it is passed into the template, so if <tag>persName</tag> contains nested TEI markup, the
            corresponding processing model rules will be applied first.</para>
          <para>The result of expanding the template then becomes the new <parameter>content</parameter> parameter to be passed to the
            behaviour (<code>inline</code> in the example above), which is processed in the normal way as defined in the TEI guidelines.</para>
          <para>You may also specify additional parameters to be included in the template. For example, the TEI document may contain a
            glossary of terms which are referenced in the text using <code>&lt;term ref="#termid"&gt;text&lt;/term&gt;</code>. In LaTeX
            this would translate to <code>\glslink{ref}{text}</code>, which can be easily produced by the following <tag>model</tag>:</para>
          <programlisting language="xml" xml:space="preserve"><![CDATA[<elementSpec ident="term" mode="add">
    <model behaviour="inline" output="latex">
        <param name="ref" value="substring-after(@ref, '#')"/>
        <pb:template>\glslink{[[ref]]}{[[content]]}</pb:template>
    </model>
</elementSpec>]]></programlisting>
          <para>We define an additional parameter <parameter>ref</parameter>, which contains the id string from the <parameter>@ref</parameter>
            attribute, stripping out the leading '#'.</para>
          <para>The templating mechanism is not limited to LaTeX, but may also be used to generate HTML or FO,
            for example, if you have to generate a complex HTML fragment to
            represent a single TEI element. This is hard and sometimes impossible to achieve without templates. We'll see some examples in the next section.</para>
        </section>
      </section>
      <section xml:id="pb-behaviour">
        <title>Defining New Behaviours in the ODD</title>
        <para>By combining code templates with parameters we can come up with a very simple mechanism to
          define new behaviours right inside the ODD!</para>
        <para>Take the TEI Publisher documentation as an example: it is written in docbook 5 and transformed via ODD. The documentation includes some videos which are hosted on youtube. In docbook those are represented by <tag>videodata</tag>
          elements inside a <tag>videoobject</tag>:</para>
        <programlisting xml:space="preserve"><![CDATA[<figure xml:id="edit-odd">
    <title>Screencast</title>
    <mediaobject>
      <videoobject>
        <videodata fileref="https://www.youtube.com/embed/avRO-b2BwUI?rel=0" width="853" depth="480"/>
      </videoobject>
    </mediaobject>
</figure>]]></programlisting>
        <para>In the HTML output we would need to transform this into an <tag>iframe</tag>, so the reader can view the video embedded
          in the page. We can achieve this with a <tag>pb:template</tag> as sketched in the previous section, but it would be nice to
          turn this into a general-purpose behaviour, which we can re-use in other situations requiring an iframe. The TEI Publisher
          library allows us to define a behaviour right inside the ODD as follows:</para>

        <programlisting xml:space="preserve"><![CDATA[<pb:behaviour ident="iframe" output="web">
    <pb:param name="src"/>
    <pb:param name="width"/>
    <pb:param name="height"/>
    <pb:template xmlns="">
        <iframe src="[[src]]" width="[[width]]" height="[[height]]" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen="allowfullscreen"></iframe>
    </pb:template>
</pb:behaviour>]]></programlisting>

        <note>
          <para>Note how we have to reset the namespace on the <tag>pb:template</tag>? This is required because the default
            namespace in an ODD document is the TEI namespace. You thus need to reset it whenever you want to output elements
            in another or no namespace inside a template. Without this, the iframe would end up in the TEI namespace. Webbrowsers
            will usually ignore it, but it will be wrong nevertheless.</para>
        </note>
        <para>All behaviours should be included in the TEI header or - to be exact: the <tag>tagsDecl</tag> inside the <tag>encodingDesc</tag>.
          You may have multiple behaviour declarations with the same <parameter>@ident</parameter>, given that they apply to different
          <parameter>@output</parameter> modes.
          Parameters
          specified via <tag>pb:param</tag> without <parameter>@value</parameter> attribute are expected to be passed to the behaviour from the calling model.
          A parameter may be empty though. If you define an XPath expression as <parameter>@value</parameter> attribute, the result of the XPath evaluation will
          be used as value for the parameter.</para>
        <para>The new behaviour will be named <function>iframe</function> and takes three parameters: <parameter>src</parameter>,
          <parameter>width</parameter> and <parameter>height</parameter>. It can now be called from a <tag>model</tag> as follows:</para>
        <programlisting xml:space="preserve"><![CDATA[<model behaviour="iframe">
    <param name="width" value="@width"/>
    <param name="height" value="@depth"/>
    <param name="src" value="@fileref"/>
</model>]]></programlisting>
        <para>For further code examples, please have a look at <link xlink:href="odd/docbook.odd" role="source">docbook.odd</link>, which is used for viewing the
          documentation.</para>
        <note>
          <para>At the time of writing, the graphical ODD editor in TEI Publisher does not yet
            support defining your own behaviours via <tag>pb-behaviour</tag>. You thus have to
            make those changes in the source XML using eXide, oXygen or another XML editor. You
            can, however, use the graphical editor to continue editing the ODD afterwards. It is
            smart enough to not overwrite your hand-written code upon save.</para>
        </note>
      </section>
    </section>

    <section xml:id="docx">
      <title>MS Word DOCX format conversion</title>
      <para>Starting with the version 5.0.0 of the TEI Publisher a new docx handling module is available to allow for ingesting documents in <emphasis>docx</emphasis> format.
      Goal of this module is to provide a way to import Word documents, preserving their textual content, structure and basic semantics of the text,
      not to provide an authoritative mapping of complete set of MS Word features to TEI.</para>
      <para>Docx format is relatively flat, thus reconstructing logical document structure like divisions, lists and similar can be only based on
        certain heuristics. Likewise it is impossible to deduce semantics attributed to certain formatting decisions. For that reason TEI Publisher by
        intention ignores many style properties — trying to preserve as much as possible would likely just add unnecessary "noise" and result in low-quality TEI.
      </para>

      <para>
        <title>A word about Word</title>
      </para>
      <para>
        A Word document is essentially a zip archive of several different XML files.
        These files store various parts - the text content, styles, embedded media files etc. Information most relevant for the import process
        have been extracted into a map, which is passed as a parameter to the ODD, so it is available for every element.
        Thus information about numbering styles can be accessed via
        <code>$parameters?nstyle(.)</code> function and testing if a list is bulleted could be done checking the value of
        <code>$parameters?nstyle(.)/numFmt/@w:val</code>. Full list of available functions and some hints how to customize default
        conversion ODD are provided at the <link  linkend="docx-functions">end of this chapter</link>.
      </para>
      <figure>
        <title>MS Word archive structure</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="wordStructure.png" width="212px"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>
        <title>Named tei:* styles</title>
        Named styles can be strong indicators for the semantics of the text fragment. Styles whose name starts with <code>tei:</code>
        are thus recognized as TEI elements with the same name. If a character sequence uses a style called <code>tei:persName</code>,
        it will be wrapped into a TEI <element>persName</element> element in the output, e.g. <code>&lt;persName&gt;Johann Wolfgang Goethe&lt;/persName&gt;</code>.
        A place name should be marked with a style <code>tei:placeName</code> and reconstructed text could be encoded by applying a style <code>tei:supplied</code>.
      </para>

      <para>
        <title>Headings and divisions</title>
      Since Word does not have a concept for text division, instead storing just flat lists of paragraphs, so the only way to reconstruct
      the logical structure is to use Word headings and outline level associated with these to determine division boundaries.
      </para>

      <para>In the first pass, all paragraph styles starting with <code>heading</code>, <code>title</code> or <code>subtitle</code> generate a <element>tei:head</element> element.
       The outline level assigned to the heading is recorded as well.</para>

      <para>Subsequently, in a second pass through the generated output, divisions are generated based on the outline level:
       a <element>div</element> spans all text from the heading to the next heading on the same outline level and the process is repeated
       for all headings within the division on a lower outline level.</para>


      <para>
        <title>Lists</title>
        Lists structure needs to be reconstructed, very much like divisions, taking into consideration the list level
        associated with every item which can be accessed via a call to <code>$parameters?pstyle(.)//outlineLvl/@w:val</code>.
      </para>

      <para>
        <title>Foot- and endnotes</title>
      </para>
      <para>
        Footnotes are translated into TEI note elements. Endnotes are also supported and transformed into
        <code>&lt;note type="endnote"&gt;</code>.
      </para>

      <para>
        <title>Tables</title>
      </para>
      <para>
        Processing of simple tables works very well as well as cells spanning multiple colums. Row spans are not implemented yet.
      </para>

      <para>
        <title>Images</title>
      </para>
      <para>
        Embedded images are stored into a subcollection starting with the name of the docx file being processed and suffixed with <code>.media</code>, eg.
        <code>&lt;graphic url="test.docx.media/image1.png"/&gt;</code>
      </para>


      <section xml:id="docx-functions">
        <para>
          <title>ODD for docx</title>
          The ODD used for docx processing can be found in <link xlink:href="odd/docx.odd" role="source">docx.odd</link>.
        Users are free to extend the default ODD with additional heuristics. For example, a paragraph being entirely bold could also be
        treated as a heading, or a left text indent may indicate a quote.</para>
        <para>For testing purposes there is a Word document provided in <filename>data/doc/test.docx</filename>
        which includes samples of most important features like headings, lists, tables, notes and embedded images. Try uploading it via
        upload panel as described in the <link linkend="upload">upload section</link> and check the conversion results. Behaviour of the conversion mostly follows
        the approach used in TEI Stylesheets docx-to-tei transformation module and has been tested on test files included there.</para>

        <title>Parameter functions</title>
        <para>Functions below can be used to retrieve styles or other information related to a current node.
          For more usage examples see <link xlink:href="odd/docx.odd" role="source">docx.odd</link></para>
        <variablelist>
          <varlistentry>
            <term>cstyle</term>
            <listitem>
              <para>phrase level (characters, words or phrases) styles associated with the current node</para>
              <para>Returns: <code>w:style</code></para>
              <para>Usage example: <code>$parameters?cstyle(.)/name[starts-with(@w:val, 'tei:')]</code></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>endnote</term>
            <listitem>
              <para>content of the endnote</para>
              <para>Returns: <code>w:endnote/w:p</code></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>footnote</term>
            <listitem>
              <para>content of the footnote</para>
              <para>Returns: <code>w:footnote/w:p</code></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>link</term>
            <listitem>
              <para>external link</para>
              <para>Returns: <code>rel:Relationship</code></para>
              <para>Usage example: <code>$parameters?link(.)/@Target</code></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>nstyle</term>
            <listitem>
              <para>list style information associated with the current node</para>
              <para>Returns: <code>w:lvl</code></para>
              <para>Usage example: <code>$parameters?nstyle(.)/numFmt</code></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>pstyle</term>
            <listitem>
              <para>paragraph level styles associated with the current node</para>
              <para>Returns: <code>w:style</code></para>
              <para>Usage example: <code>$parameters?pstyle(.)/name[matches(@w:val, 'quote';, 'i')]</code></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section xml:id="output-media">
      <title>Output Media Settings</title>
      <para>The library supports various output media formats and translates styles into the corresponding format. Currently the following output modes are
        supported and can be used in the <parameter>@output</parameter> attribute:</para>
      <variablelist>
        <varlistentry>
          <term>web</term>
          <listitem>
            <para>Produces HTML output</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>fo</term>
          <listitem>
            <para>Generates a PDF via XSL:FO</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>latex</term>
          <listitem>
            <para>Creates a PDF via LaTeX</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>print</term>
          <listitem>
            <para>An alias which applies to both: fo and latex modes.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>epub</term>
          <listitem>
            <para>Similar to web concerning features, but targetted at epub documents</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>The quality of the generated output may vary a lot for the fo and latex modes, depending on the type of input document. The following section
        provides more details on the configuration of the FO output option:</para>
      <section>
        <title>FO Output</title>
        <para>When generating XSL:FO output, the implementation tries to translate the CSS rules specified for renditions into the corresponding XSL:FO
          formatting properties. Not all CSS properties are recognized or can be mapped to FO properties. Unknown properties defined in a rendition will be
          ignored.</para>
        <para>The default rendering for headings, paragraphs and the like is defined by a separate CSS file. The implementation merges those defaults with the
          custom renditions given in the ODD.</para>
        <para>The library searches for default CSS styles in a file named <filename>&lt;odd-name&gt;.fo.css</filename> inside the specified output collection
          (in which the generated XQuery files are stored). The style definitions are copied literally into attributes on the output XSL:FO elements, so any
          property which is a valid attribute for the corresponding element may be used. For example, <filename>teipublisher.fo.css</filename> contains:</para>
        <programlisting language="css" xml:space="preserve">
.tei-text { font-family: "Junicode"; hyphenate: true; }
.tei-floatingText { padding: 6pt; }
.tei-p { text-align: justify; }
        </programlisting>
        <para>Every XSL:FO document needs a master layout and a page sequence definition. Because those tend to be rather verbose as they include things like
          page margins etc., they are read from two XML files:</para>
        <variablelist>
          <varlistentry>
            <term>master.fo.xml</term>
            <listitem>
              <para>Contains the layout master set</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>page-sequence.fo.xml</term>
            <listitem>
              <para>Defines the main page sequence</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>The mechanisms for configuring FO output are still very much under development and we welcome suggestions by users.</para>
      </section>
      <section>
        <title>LaTeX Output</title>
        <para>The latex output mode produces good results for longer texts which fit well into the pre-defined LaTeX environments. The number of supported CSS properties is limited though:</para>
        <itemizedlist>
          <listitem>
            <para>font-weight</para>
          </listitem>
          <listitem>
            <para>font-style</para>
          </listitem>
          <listitem>
            <para>font-variant</para>
          </listitem>
          <listitem>
            <para>font-size</para>
          </listitem>
          <listitem>
            <para>color</para>
          </listitem>
          <listitem>
            <para>text-decoration</para>
          </listitem>
          <listitem>
            <para>text-align</para>
          </listitem>
          <listitem>
            <para>text-indent</para>
          </listitem>
        </itemizedlist>
        <para>To create arbitary complex LaTeX output, you may want to use the <link linkend="pb-template"><tag>pb-template</tag> extension</link> to the ODD
          syntax. It is heavily used to e.g. generate the LaTeX version of this documentation. See also
          <link xlink:href="odd/serafin.odd" role="source">serafin.odd</link> or
          <link xlink:href="odd/vangogh.odd" role="source">vangogh.odd</link> for examples.</para>
        <para>TEI Publisher creates a default LaTeX prolog based on standard packages and settings. You may overwrite
        the defaults by providing your own template within the ODD element spec for the TEI root element. See the example
        ODDs mentioned above. Note that TEI Publisher will generate some LaTeX macros for styles defined in <tag>outputRendition</tag> which should be imported into the prolog. The styles are added to the default
          configuration map and can be accessed via <command>$config('latex-styles')</command>. Refer to the
        example ODDs and just copy/paste the corresponding lines.</para>
        <para>This output mode requires a local installation of LaTeX on the machine running TEI Publisher.
          The examples have been tested on a default installation of MacTeX 2018. If you are not running
        MacTeX, you likely need to adjust the path to the LaTeX binary in the XQuery configuration module
          <filename>modules/config.xqm</filename>. Search for the variable <varname>$config:tex-command</varname>
        and adjust it to point to a binary of <command>xelatex</command>, <command>pdflatex</command> or
        <command>lualatex</command>.</para>
      </section>
      <section>
        <title>ePub Output</title>
        <para>The <parameter>epub</parameter> output mode extends the HTML mode. You may define general styling in an extra CSS file, located in
            <filename>resources/css/epub.css</filename>. This external stylesheet is included into all generated epub files and may be used to configure general
          settings like page breaks, hyphenation, font sizes etc.</para>
      </section>
    </section>
    <section xml:id="pi-config">
      <title>Configure default view via processing instructions</title>
      <para>The default view for a specific document can be configured via a processing instruction. Before displaying a document, TEI publisher will check if a
        processing instruction exists at the start of the document, telling it which ODD and view template to use (along with other configuration parameters).
        For example, the following processing instruction associates the document with the view template <filename>translation.html</filename>, the ODD
          <filename>dantiscus.odd</filename>, and switches to a page-by-page display (along TEI page break boundaries):</para>
      <synopsis language="xml">&lt;?teipublisher template="translation.html" odd="dantiscus.odd" view="page"?&gt;</synopsis>
      <para>When viewing the document by structural divisions, two additional settings control the amount of content displayed at a time:</para>
      <synopsis>&lt;?teipublisher depth="2" fill="6" odd="dta.odd"?&gt;</synopsis>
      <variablelist>
        <varlistentry>
          <term>odd</term>
          <listitem>
            <para>The ODD file to use for rendering the document.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>template</term>
          <listitem>
            <para>The HTML view template to use. Default is <code>view.html</code> as configured in <filename>modules/config.xqm</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>view</term>
          <listitem>
            <para>Default view to show when browsing the document. Supported values are <parameter>div</parameter>, <parameter>page</parameter> or
                <parameter>single</parameter>:</para>
            <orderedlist>
              <listitem>
                <para>
                  <parameter>div</parameter>: displays one structural division (TEI div, docbook section …) at a time</para>
              </listitem>
              <listitem>
                <para>
                  <parameter>page</parameter>: displays the document page by page. This requires page break indicators to be present (<tag>pb</tag> in TEI, not
                  supported for docbook).</para>
              </listitem>
              <listitem>
                <para>
                  <parameter>single</parameter>: the entire document (or a selected fragment of it) is displayed at once</para>
              </listitem>
            </orderedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>depth</term>
          <listitem>
            <para>When viewing entire divisions, the software tries to determine if it should show child divisions in separate pages or include them with the
              current div. <tag>depth</tag> indicates the nesting level up to which divisions should be shown separately. So setting it to "2" will result in
              divisions on level 3 or greater to be shown together with their enclosing div.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>fill</term>
          <listitem>
            <para>If child divisions appear on separate pages, it may happen that the enclosing div contains just a heading or a single line of text. In this
              case, the algorithm will try to fill the page by showing the first child division as well. The <tag>fill</tag> paramter defines the number of
              elements which should at least be present on a page. If not, the software tries to fill it up.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="facets">
      <title>Define Facets for Browsing and Search</title>
      <para>Facets allow users to quickly navigate through a set of documents or query results by
        selecting from predefined categories or properties. This way, users can "drill down" into
        the set, reducing the number of displayed items with every step. For demonstration purposes,
        TEI Publisher configures two facets by default: "Genre" and "Language". You can see those to
        the left of the document list on the start page, or below the search box on the search
        result page.</para>
      <figure>
        <title>Facets on the start page</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="facets.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>From a user perspective, the main concept behind facets is the <emphasis>drill
          down</emphasis>: initially the user sees all facet values associated with the set of
        documents or search results displayed. The number behind each value denotes the number of
        items in the set having the particular facet set. As the user selects one facet, the set
        necessarily becomes smaller, so non-matching facet values will disappear and the numbers
        adjust accordingly.</para>
      <para>Facets are a new feature in eXist 5.0. They are super fast because eXist will create
        them when indexing the document. No extra computation is needed when the user clicks on a
        facet to drill down into a displayed set: all information is already available in the index.
        To see a more complex example of facets in action, visit our <link
          xlink:href="https://teipublisher.com/exist/apps/vangogh/index.html">Van Gogh</link>
        demo.</para>
      <para>If you would like to configure other or additional facets, you need to edit three
        files:</para>
      <variablelist>
        <varlistentry>
          <term><filename>collection.xconf</filename></term>
          <listitem>
            <para>The <filename>collection.xconf</filename> tells eXist how to index the collection.
              The default configuration in TEI Publisher creates two Lucene full-text indexes for
              TEI on <tag>tei:text</tag> and <tag>tei:div</tag>. Each of those may have facets
              attached. Every facet must have a <parameter>dimension</parameter> and an
                <parameter>expression</parameter> attribute. The expression is an arbitrary
              XPath/XQuery string. For every element being indexed, the expression is evaluated once
              and the result defines the string values which will be associated with the specified
              facet dimension.</para>
            <para>For a description of how full-text indexes and facets are defined in the
                <filename>collection.xconf</filename>, please refer to the <link
                xlink:href="http://exist-db.org/exist/apps/doc/lucene">eXist
              documentation</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><filename>index.xql</filename></term>
          <listitem>
            <para>If you open the default <filename>collection.xconf</filename>, you'll see that
              most facet expressions call a function <function>nav:get-metadata</function>. This
              function is declared in <filename>index.xql</filename>. By externalizing most of the
              code into a separate function, we can keep the index configuration clean and
              short.</para>
            <para>The default <filename>index.xql</filename> already does some advanced
              preprocessing, in particular for the "genre" facet: each of the sample documents
              references a central taxonomy (contained in <filename>data/taxonomy.xml</filename>).
              The references are resolved at indexing time by following the <tag>catRef</tag>
              element's <parameter>@target</parameter> attribute. Note that we create a hierarchical
              facet, because e.g. "Philosophy" is a sub-category of "Prose". The code in function
                <function>idx:get-genre</function> will automatically include the
              super-category.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><filename>config.xqm</filename></term>
          <listitem>
            <para>While the other two files cover the server-side creation of facets, we also need a
              place where we define how facets should be displayed in the user interface. The main
              configuration module: <filename>config.xqm</filename> declares a variable
                <varname>$config:facets</varname>. It should contain an array of maps, where each
              map defines the settings for one dimension, e.g.:</para>
            <programlisting language="xquery" xml:space="preserve">
(:
 : Display configuration for facets to be shown in the sidebar. The facets themselves
 : are configured in the index configuration, collection.xconf.
 :)
declare variable $config:facets := [
    map {
        "dimension": "genre",
        "heading": "Genre",
        "max": 5,
        "hierarchical": true()
    },
    map {
        "dimension": "language",
        "heading": "Language",
        "max": 5,
        "hierarchical": false(),
        "output": function($label) {
            switch($label)
                case "de" return "German"
                case "es" return "Spanish"
                case "la" return "Latin"
                case "fr" return "French"
                case "en" return "English"
                default return $label
        }
    }
];
</programlisting>
            <para>The map properties are as follows:</para>
            <variablelist>
              <varlistentry>
                <term>dimension</term>
                <listitem>
                  <para>The name of the dimension. Should correspond to the value of the <parameter>@dimension</parameter> attribute used in <filename>collection.xconf</filename></para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>heading</term>
                <listitem>
                  <para>The heading to display above the facet values</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>max</term>
                <listitem>
                  <para>Maximum number of facet values to be displayed initially. More can be shown
                    if the user clicks on the <guilabel>Show All</guilabel> checkbox. Pass an empty
                    sequence, i.e. (), to not limit the number and hide the checkbox.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>hierarchical</term>
                <listitem>
                  <para>Defines if the facet is hierarchical, which means that only the top-level
                    facet values in the hierarchy will be shown initially. If the user selects one
                    top-level value, the interface will expand and show the sub-categories. For this
                    to work the facet must be configured as "hierarchical" in
                      <filename>collection.xconf</filename></para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>output</term>
                <listitem>
                  <para>A function which can be used to process the facet value before display. The
                    facet label will be replaced by whatever the function returns.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="odd-by-example">
      <title>Building a Sample-Based ODD</title>
      <para>If you do not want to start a customized ODD from a blank template, you can alternatively generate one that covers the classes and elements of a
        selection of TEI files stored in tei-publisher's default data collection. Simply select one or more sample documents in the list to the left, enter a
        name and title into the form and click on <guibutton>Build from TEI examples</guibutton>. Note that if you haven't removed the default examples TEI
        files that shipped with tei-publisher their markup will be included in the constructed ODD as well.</para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="BuildODD.gif"/>
        </imageobject>
      </mediaobject>
      <para>This method uses the <filename>oddbyexample.xsl</filename> stylesheet that is part of the TEI consortium's <link
          xlink:href="https://github.com/TEIC/Stylesheets">stylesheets</link>. Users with a corpus of one or more TEI files can generated a custom odd that
        contains explicit additions and deletions for all possible TEI modules, as well as, <tag>valList</tag> for attribute values in the input corpus.</para>
      <para>By default the basis of the comparison for which elements have been modified in the examples is the full <filename>tei_all.odd</filename>.</para>
      <section>
        <title>Advanced Use</title>
        <para>To further tweak the building process you can call the functions of the <filename>odd-by-example.xql</filename> module from your own XQuery code.
          If you wish to generate your own basis for the comparison you can call the following function to store a compiled ODD in the default odd location of
          tei-publisher:</para>
        <programlisting language="XQuery" xml:space="preserve">obe:compile-odd(doc('../odd/my-file.odd'), 'my-file-name')</programlisting>
        <note>
          <title>Note</title>
          <para>Do to a bug in the <filename>odd2odd.xsl</filename> stylesheet the output of this function is not always valid. To use it for further processing
            you need to make sure that only valid documents are used for further processing</para>
        </note>
        <para>You can also modify the transformation parameters of:</para>
        <programlisting language="XQuery">obe:process-example(doc('../data/test/myTEI.xml'), 'odd-name', 'simplePrint')</programlisting>
        <para>The above example uses simplePrint as a basis for building the new ODD. The full list of configurable options are:</para>
        <programlisting language="xml" xml:space="preserve">&lt;parameters&gt;
  &lt;!-- the document corpus --&gt;
  &lt;param name="corpus" value="."/&gt;
  &lt;!-- name of odd --&gt;
  &lt;param name="schema" value="{substring-before($output, '.odd')}"/&gt;
  &lt;!-- the source of the TEI (just needs *Spec)--&gt;
  &lt;param name="defaultSource" value="{$base}"/&gt;
  &lt;!-- should we make valList for @rend and @rendition --&gt;
  &lt;param name="enumerateRend" value="false"/&gt;
  &lt;!-- whether to do all the global attributes --&gt;
  &lt;param name="keepGlobals" value="true"/&gt;
  &lt;!-- should elements in teiHeader be included?--&gt;
  &lt;param name="includeHeader" value="true"/&gt;
  &lt;!-- should we make valList for @type --&gt;
  &lt;param name="enumerateType" value="true"/&gt;
  &lt;!-- should we deal with non-TEI namespaces --&gt;
  &lt;param name="processNonTEI" value="false"/&gt;
  &lt;!-- do you want moduleRef generated with @include or @except? --&gt;
  &lt;!-- seems broken see https://github.com/TEIC/Stylesheets/issues/212 --&gt;
  &lt;param name="method" value="include"/&gt;
  &lt;!-- turn on debug messages --&gt;
  &lt;param name="debug" value="false"/&gt;
  &lt;!-- turn on messages --&gt;
  &lt;param name="verbose" value="false"/&gt;
  &lt;!-- which files to look at? provide suffix --&gt;
  &lt;param name="suffix" value="xml"/&gt;
  &lt;!-- should P4 files be considered? --&gt;
  &lt;param name="processP4" value="false"/&gt;
  &lt;!-- should P5 files be considered? --&gt;
  &lt;param name="processP5" value="true"/&gt;
&lt;/parameters&gt;
          </programlisting>
      </section>
    </section>
    <section xml:id="appgen">
      <title>Creating apps with the App Generator</title>
      <para>Once you are happy with a certain customization, you can create a complete, standalone application out of it, which can be further tailored to fit
        your needs. The generated app can be downloaded as a portable package, installed into other eXist instances, or synced to disk for further development.
        It provides a customized view of the main TEI Publisher components, configured to use a certain ODD, template and other settings.</para>
      <note>
        <title>Note</title>
        <para>For the next major release (5.0) we plan to redesign how apps are generated and administrated in TEI Publisher. Right now, apps include everything needed to run without TEI
          Publisher. This has advantages, but also makes it difficult to update to newer releases. In the future, apps should become more lightweight in
          general, containing only resources which are truly specific to the app (ODDs, HTML templates, images, custom components), while all generic
          functionality will be provided by TEI Publisher and its library. TEI Publisher itself will get an app administration page, which will allow users to
          manage and customize all installed apps from a central management shell.</para>
        <para>Until then, you can safely use the current app generator, but make sure you are following our best practice recommendations, so we can guarantee
          a smooth upgrade path.</para>
      </note>
      <para>To get started, click on <guimenuitem>App Generator</guimenuitem> in the menu bar and fill out the form.</para>

      <para>The following form fields are important:</para>
      <variablelist>
        <varlistentry>
          <term>ODD</term>
          <listitem>
            <para>Name of the ODD (discussed above) to be used for transformations.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>URL to identify the app</term>
          <listitem>
            <para>This is the main identifier for your app and should be a globally unique URI. It does not need to correspond to any existing web site. eXist's
              package manager is using this URI as a unique identifier for the app.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Abbreviation</term>
          <listitem>
            <para>The abbreviation will be used as the name of the root collection of your app and as the last path component in any URL pointing to the app. It
              should be unique within one database instance.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Template</term>
          <listitem>
            <para>The HTML template to be used as default for viewing a document. If you created a custom template or modified any of the existing templates,
              you likely want to select this here.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Data Collection</term>
          <listitem>
            <para>Only specify something here if you have existing data inside the database or if you want to ship the data set as part of a second, separate
              app. In all other cases, leave this field empty.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Default View</term>
          <listitem>
            <para>If you would like readers to view documents page by page, set this to <guimenuitem>"By Page"</guimenuitem>. This requires that all your
              documents have appropriate pb elements. The setting can be overwritten in HTML templates or via parameters though.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>User/Password</term>
          <listitem>
            <para>The user account which will own all application files. For security reasons, it is advisable to create a new account for every app.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Once you created the new application, log into it using the account details you provided. You can then upload XML documents using the upload panel
        in the right sidebar.</para>
      <figure xml:id="create-app">
        <title>Create an App</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="CreateApp.gif"/>
          </imageobject>
        </mediaobject>
      </figure>
      <section>
        <title>Generated Code Overview</title>
        <section>
          <title>XQuery Code</title>
          <para>The collection structure of the generated app follows customary design of many eXist apps. Best practices for modifying the app are discussed in
            further sections of this document. You can find the code of your generated app in within the collection
              <filename>/db/apps/abbreviation-of-my-app</filename>.</para>
          <variablelist>
            <varlistentry>
              <term>modules</term>
              <listitem>
                <para>Contains XQuery modules used by the app, including the copied TEI Publisher libraries in <filename>modules/lib</filename> subcollection.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>resources</term>
              <listitem>
                <para>Contains a number of subcollections for various resources used by the app, such as images, fonts or JavaScript libraries. Of particular
                  interest is the <filename>resources/odd</filename> subcollection where app's own ODD files are stored.</para>
                <para>All of the app styling is done via a set of modularized less stylesheets, residing in <filename>resources/css</filename>. The main file is
                    <filename>style.less</filename>, which defines a number of core parameters. Ideally this should be the only file you ever need to
                  modify.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>templates</term>
              <listitem>
                <para>Html templates for the templating framework. Contain page templates as well as smaller components such as menu or login pane.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>transform</term>
              <listitem>
                <para>This collections contains XQuery modules governing the transformations and styles generated from app's ODD. Its content will be
                  overwritten with each ODD recompilation, thus there's no point modifying it. It's worth consulting though to gain better understanding and
                  troubleshoot the transformations with TEI Processing Model. In case of an issue, it may help to know the files: </para>
                <variablelist>
                  <varlistentry>
                    <term>myodd-web.xql</term>
                    <listitem>
                      <para>The transformation module generated for output mode "web".</para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>myodd-web-module.xql</term>
                    <listitem>
                      <para>Library module which calls the transformation module.</para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>myodd.css</term>
                    <listitem>
                      <para>CSS styles generated from the ODD.</para>
                    </listitem>
                  </varlistentry>
                </variablelist>
                <para>Files start with the name of the odd and the output mode they belong to.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      </section>
      <section>
        <title>Modifying the App</title>
          <para>When you are logged in, the "Admin" menu in the top navbar provides various links for ease of customization of your app:</para>
          <variablelist>
            <varlistentry>
              <term>Recompile ODD</term>
              <listitem>
                <para>After changing the application's ODD, click here to update the app.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Update Document Metadata Index</term>
              <listitem>
                <para>The application maintains a separate index of titles and authors, which is used to sort the list of documents shown on the landing page.
                  This index is not refreshed automatically, so you need to click this menu entry once after uploading data.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Edit ODD</term>
              <listitem>
                <para>Opens the application's ODD in eXide for editing.</para>
              </listitem>
            </varlistentry>
          </variablelist>
      </section>
        <section>
          <title>Best Practice Recommendations</title>
          <para>In case you'd wish to further customize the generated app it's worth to keep the changes as much separated from the generated code as possible
            to allow for future alignment with newer versions of the TEI Publisher. </para>
          <para>The generated app shares most of its XQuery libraries with the main TEI Publisher app. A copy of those is included in the
              <filename>lib/</filename> collection of the generated app and should not be modified! This way you can later update the libraries to a newer TEI
            Publisher release without breaking your app. Including the libraries in the generated app creates some redundancy, but we chose to accept this
            trade-off to make it easier to view and modify everything relevant to the app.</para>
          <para>If you find that modifications of <filename>lib/</filename> modules are necessary, please consider if your change would be generally beneficial
            for TEI Publisher and create PR for the TEI Publisher if so.</para>
          <para>It is considered safe:</para>
          <orderedlist>
            <listitem>
              <para>to modify all HTML templates below <filename>templates/</filename> as well as <filename>index.html</filename> and <filename>search.html</filename> in the root of the app</para>
            </listitem>
            <listitem>
              <para>to change XQuery modules in <filename>modules</filename>, excluding those in <filename>modules/lib</filename></para>
            </listitem>
            <listitem>
              <para>to add images, fonts or change i18n translations below <filename>resources</filename></para>
            </listitem>
            <listitem>
              <para>add new XQuery modules into <filename>modules</filename>, which may be called from e.g. web components.</para>
            </listitem>
          </orderedlist>
          <para>The following core XQuery modules in every app are safe to be modified (all are stored in <filename>modules</filename> subcollection:</para>
          <variablelist>
            <varlistentry>
              <term><filename>config.xqm</filename></term>
              <listitem>
                <para>The main configuration file for the app. It contains a number of parameters which control important aspects.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><filename>app.xql</filename></term>
              <listitem>
                <para>Add your own HTML templating functions in XQuery here if needed. With TEI Publisher 4.0, there should be less
                of a need to extend this file as most of the application logic is realized via web components.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><filename>pm-config.xql</filename></term>
              <listitem>
                <para>This file defines the functions to be called for rendering TEI content via the processing model. It imports the modules generated from
                  your ODD and assigns them to variables as function pointers. This approach is much more efficient than the dynamic lookups done by the main
                  TEI Publisher app. It has been production tested on large web sites. The downside is that the connection to the ODD is hard-coded. If you need
                  to switch between different ODDs, you would need to change<filename> pm-config.xql</filename> and insert a proper switch there depending on
                  external parameters.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>navigation-*.xql</term>
              <listitem>
                <para>This group of modules contains functions relevant for the display and navigation of documents corresponding to
                a given document type</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>*-query.xql</term>
              <listitem>
                <para>Modules with functions powering the search features</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>view.xql</term>
              <listitem>
                <para>The main module of the app. This module initializes eXist's templating system. The only case when it should be modified is if you want to add further XQuery library modules containing template functions.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
      <section>
        <title>Creating Custom Web Components</title>
        <para>In some cases an app may want to add its own web components to the collection provided by TEI Publisher or extend one of the provided components.
          The added component should be placed into a subfolder <filename>webcomponents</filename> below the app root collection.</para>
        <para>TEI Publisher uses <link xlink:href="https://polymer-library.polymer-project.org/2.0/docs/devguide/feature-overview">version 2</link> of the
          Polymer library. Though web components are basically interoperable and you could use any framework you like, we recommend to base the new component on
          the same version of Polymer to facilitate integration.</para>
        <para>You can find boilerplate code for a new component in the file <link xlink:href="components/seed-element.html" role="source"
              ><filename>components/seed-element.html</filename></link> within the TEI Publisher distribution. Just save the file under a new name into the
            <filename>webcomponents</filename> subdirectory of your app and rename all occurrances of <code>seed-element</code> and
          <code>SeedElement</code>.</para>
        <para>In order to use the element, you need to import it into your HTML template. Make sure it is imported after
            <filename>dependencies-dev.html</filename>, which loads the default TEI Publisher components:</para>
        <programlisting>&lt;link rel="import" href="components/dependencies-dev.html"/>
&lt;link rel="import" href="webcomponents/my-component.html"/></programlisting>
        <para>A component may also extend one of the existing components provided by TEI Publisher. For example, the component showing the list of available
          documents on the index page extends <tag>pb-load</tag>:</para>
        <synopsis language="javascript">class PbBrowseDocs extends PbMixin(PbLoad) {</synopsis>
      </section>
      <section>
        <title>Exporting the Finished App</title>
        <para>To save your finished application or exchange it with other people, you need to save it as an application archive. Application archives use a
          standardized format: the resulting .xar file can be uploaded to any eXist instance via the dashboard and the package manager will take care of the
          deployment.</para>
        <para>There are two ways to create a .xar file from your application:</para>
        <itemizedlist>
          <listitem>
            <para>Use the "Application"/"Download App" menu entry in eXide to directly download a .xar</para>
          </listitem>
          <listitem>
            <para>Synchronize the application to a directory on disk via "Application"/"Synchronize" in eXide</para>
          </listitem>
        </itemizedlist>
        <para>The second approach is the recommended one. It requires that you have access to the file system of the server running eXist though, so it's
          usually only an option if you run your own eXist. The synchronize steps in detail:</para>
        <itemizedlist>
          <listitem>
            <para>Prerequisite: you need to have the <link xlink:href="http://ant.apache.org/">Apache Ant</link> build tool installed.</para>
          </listitem>
          <listitem>
            <para>Open one resource belonging to your application in eXide. It doesn't matter which one. The only important thing is that the name of your app
              is displayed next to "Current app:" on the top right of the eXide window. If this is not the case, stop and check again!</para>
          </listitem>
          <listitem>
            <para>Click "Application"/"Synchronize" in the menu. It opens up a dialog with two fields: "Start time" and "Target directory". When you synchronize
              the first time, empty the "Start time" field. Enter a valid, absolute directory path on your server machine into "Target directory".</para>
          </listitem>
          <listitem>
            <para>Click the "Synchronize" button. This may take a moment, but you should see a list of written files at the bottom of the dialog
              afterwards.</para>
          </listitem>
          <listitem>
            <para>Change to the directory you specified for synchronize.</para>
          </listitem>
          <listitem>
            <para>Calling "ant" inside the directory should create a fresh .xar file in the build/ subdirectory.</para>
          </listitem>
        </itemizedlist>
        <para>Note: for security reasons, the password you entered when creating the app is not stored in the database, so it cannot be synced to disk. To
          restore a password for your app, you thus need to edit the <filename>repo.xml</filename> file in the directory and add a <varname>@password</varname>
          attribute to the <tag>permissions</tag> element.</para>
        <figure xml:id="sync">
          <title>Export an App</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="Sync.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>
    <section xml:id="extension-modules">
      <title>Extension Modules</title>
      <para>Where possible, developers should stick to the standard behaviours defined by the TEI guidelines, or use the <link linkend="pb-behaviour"
            ><tag>pb-behaviour</tag> extension</link> of the ODD syntax. However, there might be situations in which one has to generate a specific type of
        complex output, which requires the full power of XQuery. To facilitate this, the implementation allows additional extension modules to be
        configured:</para>
      <section>
        <title>Configuration</title>
        <para>Configuration is done via an XML file which should reside in the same collection as the source ODD files. It contains a series of output elements,
          each listing the extension modules to be loaded for the given output mode. Each definition may optionally be limited to a specific ODD, whose name is
          specified in the <varname>@odd</varname> attribute.</para>
        <programlisting language="xml" xml:space="preserve">&lt;modules&gt;
    &lt;!-- functions or behaviours common to all output modes --&gt;
    &lt;output&gt;
      &lt;module uri="http://www.tei-c.org/tei-simple/xquery/common-functions" prefix="tc" at="xmldb:exist:///db/apps/my-app/modules/common.xql"/&gt;
    &lt;/output&gt;
    &lt;!-- General fo extension functions --&gt;
    &lt;output mode="print"&gt;
      &lt;module uri="http://www.tei-c.org/tei-simple/xquery/ext-fo" prefix="ext-fo" at="xmldb:exist:///db/apps/tei-publisher/modules/ext-fo.xql"/&gt;
    &lt;/output&gt;
    &lt;!-- Special web configuration for the documentation (to handle &lt;code&gt;) --&gt;
    &lt;output mode="web" odd="documentation"&gt;
      &lt;module uri="http://www.tei-c.org/tei-simple/xquery/ext-html" prefix="ext-html" at="xmldb:exist:///db/apps/tei-publisher/modules/ext-html.xql"/&gt;
    &lt;/output&gt;
&lt;/modules&gt;</programlisting>
        <para>Whenever the library tries to locate a processing model function for a given behaviour, it will <emphasis role="bold">first</emphasis> check any
          extension module it knows to see if it contains a matching function. One can thus <emphasis role="bold">overwrite</emphasis> the default functions as
          well as define new ones.</para>
        <para>An extension module may also contain general purpose XQuery functions you want to call from within an ODD parameter, e.g. for formatting a date,
          outputting a number etc. To make those functions available to all output modes, just skip the <varname>@mode</varname> attribute.</para>
      </section>
      <section>
        <title>Implementing Behaviours</title>
        <para>To be recognized by the library, an extension function needs to accept at least 4 default arguments, plus any number of custom parameters (to be
          passed in the behaviour attribute). The required parameters are:</para>
        <variablelist>
          <varlistentry>
            <term>$config</term>
            <listitem>
              <para>a map containing configuration information as well as function references to be called. The most important ones are
                  <function>$config?apply($config, $node)</function> and <function>$config?apply-children($config, $node, $content)</function>. Both are
                function items and when called, continue processing with either a single <varname>$node</varname> or a sequence of nodes in
                  <varname>$content</varname>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>$node</term>
            <listitem>
              <para>the TEI element being processed at the moment</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>$class</term>
            <listitem>
              <para>a list of HTML class names to be used. This includes automatically generated class names as well as those passed via
                  <varname>@cssClass</varname> on a model item.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>$content</term>
            <listitem>
              <para>because <varname>content</varname> is defined for every model rule, it is always passed to a behaviour function (though it might be
                empty)</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>For all additional parameters, the processing model implementation tries to fill each custom parameter with a corresponding value by looking
          through the <tag>param</tag> tags in the ODD to find one with a name matching the variable name. If no matching parameter can be found, the function
          argument will be set to the empty sequence. You should not enforce a type or cardinality for any of the custom parameters as this may lead to
          unexpected errors. The parameters may be empty or contain more than one item.</para>
        <para>For example, we may want to define a behaviour for code highlighting in an extension module named <filename>ext-html.xql</filename> may look as
          follows:</para>
        <programlisting language="xquery" xml:space="preserve">xquery version "3.1";
(:~ : Non-standard extension functions, mainly used for the documentation. :)
module namespace pmf="http://www.tei-c.org/tei-simple/xquery/ext-html";
declare namespace tei="http://www.tei-c.org/ns/1.0";

declare function pmf:code($config as map(*), $node as element(), $class as xs:string+, $content as node()*, $lang as item()?) {
    &lt;pre class="code {$class}" data-language="{if ($lang) then $lang else 'xquery'}"&gt;
    {replace(string-join($content/node()), "^\s+?(.*)\s+$", "$1")}
    &lt;/pre&gt;
};</programlisting>
        <para>It defines one function, <function>pmf:code</function>, which can be called from the ODD as follows:</para>
        <programlisting language="xml">
&lt;model behaviour="code"&gt; &lt;param name="lang" value="@lang"/&gt; &lt;/model&gt;</programlisting>
      </section>
      <section>
        <title>Behaviours Accepting User-Defined Parameters</title>
        <para>Sometimes you may like to implement a generic behaviour which takes arbitrary parameters from the user. This means the parameter list of your
          behaviour will not be fixed.</para>
        <para>To facilitate this, a behaviour function may declare a final parameter <code>$optional as map(*)</code>. If the processor finds
            <tag>param</tag> tags in the model rule which cannot be mapped to a declared parameter, it stores this extra paramter as a key/value pair into the
          map <parameter>$optional</parameter>.</para>
      </section>
    </section>
  </section>
  <section>
    <title>Embedding TEI Publisher Output</title>
    <para>Sometimes you may already have a website based on a CMS like WordPress, Drupal etc. into which you would like to embed HTML output generated by TEI
      Publisher. This is done easily in a number of ways. For sure it requires that you have a TEI Publisher instance running somewhere, into which you can
      upload TEI documents. It does not need to be on the same server though.</para>
    <section>
      <title>Retrieving a whole document as HTML</title>
      <para>The simplest case would be to retrieve the entire content of a TEI document as HTML, transformed through an ODD with processing instructions. Behind
        the scenes, TEI Publisher has two parts: a library part, which is essentially an implementation of the TEI processing model, and the application part,
        which adds user interface elements and other functionality around the library. The library part can be used independently. All you need is a small
        XQuery which calls the library modules, setting the correct source document and ODD. Fortunately, TEI Publisher already contains a boilerplate XQuery
        script for this job, which you can call as follows in your browser:</para>
      <para><link xlink:href="https://teipublisher.com/exist/apps/tei-publisher/modules/lib/transform.xql?doc=test/F-rom.xml&amp;odd=shakespeare.odd">https://teipublisher.com/exist/apps/tei-publisher/modules/lib/transform.xql?doc=test/F-rom.xml&amp;odd=shakespeare.odd</link></para>
      <para>This will retrieve the content of Shakespeare's <citetitle>Romeo and Juliet</citetitle> as an HTML page, transformed through the odd
          <filename>shakespeare.odd</filename>. For embedding an entire document in an iframe or similar, this should already be enough.</para>
    </section>
    <section>
      <title>Embedding webcomponents for navigation</title>
      <para>For longer documents, embedding the entire content in a page may not be too user-friendly. A better way is to use the library of webcomponents
        provided by TEI Publisher. This way, we can show the content page by page or division by division, allowing the reader to navigate between
        sections.</para>
      <para>Because webcomponents are part of the HTML5 standard and supported natively by most modern browsers, we can easily import the component library
        which is at the core of the TEI Publisher app and reuse the components it provides in other contexts. They should work in any HTML5 page, no matter if
        it was written by hand, is generated by PHP, Python or a CMS.</para>
      <para>For a start, the page should import two things in its header:</para>
      <programlisting language="html" xml:space="preserve"><![CDATA[<script src="https://teipublisher.com/exist/apps/tei-publisher/components/bower_components/webcomponentsjs/webcomponents-loader.js"></script>
<link rel="import" href="https://teipublisher.com/exist/apps/tei-publisher/components/dependencies-dev.html"/>]]></programlisting>
      <para>The <tag>script</tag> tag should come first. It loads a thin compatibility layer for those browsers which do not fully support the webcomponents
        standard. The <tag>link</tag> tag then imports all the components provided by TEI Publisher and their dependencies.</para>
      <para>In the example we're loading both from the TEI Publisher website. If you have set up your own instance of eXist-db and TEI Publisher, you should
        change the URL <emphasis>to point to your instance</emphasis>. This is important because the components will expect the documents you want to display to
        be stored in the same instance.</para>
      <para>Now let's actually use the components to display Shakespeare's <citetitle>Romeo and Juliet</citetitle>: in the HTML <tag>body</tag>, include the
        following snippet: </para>
      <programlisting language="html" xml:space="preserve">&lt;pb-document id="document1" path="test/F-rom.xml" odd="shakespeare">&lt;/pb-document>
&lt;!-- Navigate to previous page -->
&lt;pb-navigation direction="backward" unit="page" keyboard="left">
    &lt;paper-fab icon="icons:chevron-left">&lt;/paper-fab>
&lt;/pb-navigation>
&lt;pb-view id="view1" src="document1" view="page">&lt;/pb-view>
&lt;!-- Navigate to next page -->
&lt;pb-navigation direction="forward" unit="page" keyboard="right">
    &lt;paper-fab icon="icons:chevron-right">&lt;/paper-fab>
&lt;/pb-navigation></programlisting>
      <para><tag>pb-document</tag> defines the document to be displayed. The path is relative to the data root of the TEI Publisher instance. It also specifies
        the ODD to be used for the transformation.</para>
      <para><tag>pb-view</tag> is the main component for displaying the transformed content. It references the <tag>pb-document</tag> to use as source in its
          <option>src</option> attribute. The Shakespeare does tag page breaks, so we switch to page-by-page view via the <option>view</option> attribute to
        show the user only one page at a time. The default would be to use a division-by-division view (<code>view="div"</code>), but you could also request the
        entire content at once using <code>view="single"</code>.</para>
      <para><tag>pb-navigation</tag> adds forward/backward navigation buttons to the page, allowing the user to switch to the next/previous page of the
        document. You can use various types of buttons, but in this case we're choosing a <tag>paper-fab</tag> element, which creates a rounded, floating button
        (<tag>paper-fab</tag> is part of the standard <link xlink:href="https://www.webcomponents.org/element/@polymer/paper-fab">components library</link>).</para>
      <para>Please have a look at the <link xlink:href="../embed.html" xlink:show="new">working example page</link> to see everything in action and read through its <link xlink:href="embed.html" role="source">source code</link>.</para>
    </section>
  </section>




  <section xml:id="faq">
    <title>Frequently Asked Questions</title>
    <section>
      <title>How can I include elements located elsewhere (in the same or another document)?</title>
      <para>For example, it is common practice to keep notes in the back of the document and reference them using ref. When processing the ref, you want to
        include the note's content into the <function>note</function> behaviour:</para>
      <programlisting language="xml" xml:space="preserve">&lt;elementSpec mode="change" ident="ref"&gt;
  &lt;model behaviour="note"&gt;
    &lt;param name="place" value="'margin'"/&gt;
    &lt;!-- Look up the note by xml:id --&gt;
    &lt;param name="content" value="id(substring-after(@target, '#'), root($parameters?root))/node()"/&gt;
  &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
      <para>Here we use the <function>fn:id</function> XPath function to look up the element whose ID is given in the <varname>@target</varname> attribute. It
        will usually start with an '#', so we have to strip this out. The second parameter to <function>fn:id</function> specifies the document-node to search
        for the id. Note that we're using <parameter>$parameters?root</parameter> here and not just <function>root(.)</function>. See next topic below for an
        explanation.</para>
    </section>
    <section>
      <title>How do I navigate to the root of the document in XPath?</title>
      <para>Normally you would get to the document-node of the current document by calling <function>root(.)</function> in an XPath within the ODD. This works,
        but there is a caveat:</para>
      <para>TEI Publisher will not always pass the entire document to the ODD! For example, if documents are viewed page by page, TEI Publisher will first
        construct a virtual TEI document containing only the relevant content of the page. This is necessary to make sure the content is well-formed XML.
        Calling <function>root(.)</function> may thus not return the original document-node but just the constructed root.</para>
      <para>To compensate for this, TEI Publisher always passes in an external parameter pointing to the original document-node. It can be accessed via the
        variable <parameter>$parameters?root</parameter>.</para>
    </section>
    <section>
      <title>Why does my added model not have an effect?</title>
      <para>You added another model rule to an elementSpec but it does not seem to have any effect. This might be due to the rules for selecting a model:</para>
      <para>The processor walks through all models in sequence and stops at the first one which either has a matching <varname>@predicate</varname> and/or
          <varname>@output</varname> or neither of both. <emphasis role="bold">Order is important</emphasis>! If your default model (the one without predicate
        or output) is placed in front of your more specific models, it will always match:</para>
      <programlisting xml:space="preserve">&lt;elementSpec mode="change" ident="hi"&gt;
  &lt;model behaviour="inline"/&gt;
  &lt;model predicate="@rend='bold'" behaviour="inline"&gt;
    &lt;outputRendition&gt;font-weight: bold;&lt;/outputRendition&gt;
  &lt;/model&gt;
&lt;/elementSpec&gt;</programlisting>
    </section>
  </section>
  <section xml:id="roadmap">
    <title>Roadmap</title>
    <para>Here's a list of ideas we'd like to see incorporated into TEI Publisher. These are in various stages of development - some already advanced,
      some in conceptual phase, some waiting for implementation.</para>
    <section>
      <title>Wider coverage of input/output formats</title>
      <itemizedlist>
        <listitem>Docx</listitem>
        <listitem>InDesign</listitem>
      </itemizedlist>
      <title>Interoperability</title>
      <itemizedlist>
        <listitem>DTS</listitem>
        <listitem>CQL</listitem>
      </itemizedlist>
      <title>Custom app maintenance</title>
      <itemizedlist>
        <listitem>Refactoring reusable parts of the TEI Publisher into library modules</listitem>
        <listitem>Switch to lightweight custom app model relying on shared libraries</listitem>
        <listitem>Custom app control-center for automated app updates and management</listitem>
      </itemizedlist>
      <title>ODD editing</title>
      <itemizedlist>
        <listitem>UI and usability improvements</listitem>
      </itemizedlist>
      <title>Showcases</title>
      <itemizedlist>
        <listitem>Extend coverage of the document and layout examples: prosopographical resources, dictionaries, linguistic corpora...</listitem>
        <listitem>Complete app showcases for other domains</listitem>
      </itemizedlist>
      <title>Editing</title>
      <itemizedlist>
        <listitem>Form-based editing for document metadata</listitem>
        <listitem>Stand-off and inline editing via custom components, eg. for dates, people or places</listitem>
      </itemizedlist>
      <title>Further generalizations</title>
      <itemizedlist>
        <listitem>Improve state management and component communication</listitem>
        <listitem>Navigation, search, browse, creation of virtual subcollections </listitem>
      </itemizedlist>
      <title>Documentation and tutorials</title>
    </section>
  </section>
</article>
